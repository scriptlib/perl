#!/usr/bin/perl -w
use MyPlace::Script::Message;
sub dddd {
	die();
}

package Babes;
# $Id$
use strict;
use utf8;
our $VERSION = 'v0.1';
my @OPTIONS = qw/
	help|h|? 
	manual|man
	duplicated|dup
	no-cover|nc
	junction
	all
	no-junction
	clean
	clips
	trash
	reposter
	retry
	reverse
	revert
	move
	images
	videos
	include=s
	exclude=s
	into=s
	follow
	unfollow|uf
	enable
	disable
	dryrun
	images-without-videos
	videos-without-images
	touch
	empty
	list
	ladies
	taskspool
	mtm
	weipai
	meipai
	miaopai
	weibo
	moko
	mplayer=s
	start=i
	find=s
	replace=s
	vlook
	no-download
	DI
	into-prefix=s
	close-prefix=s
	move-prefix=s
	worker
	sites|hosts=s
	norc|nr
	same-directory
	mkdir|md
	fullname|full
/;
our %CONF;
our @DATABASE_DIR = qw{
	sites
	../sites
	../../sites
	urlrule/sites
	../urlrule/sites
	../../urlrule/sites
};

sub get_pref {
	return $CONF{$_[0]};
}
sub create_dir {
	my $DST = shift;
	my $msg = shift(@_) || "Error creating $DST\n";
	return 1 unless($DST);
	return 1 if(-d $DST);
	if(!mkdir $DST) {
		print STDERR $msg;
		return undef;
	}
	return 1;
}

sub strtime {
	my $time =  shift(@_) || time();
	my $style = shift;
	my $sep1 = shift(@_); 
	my $sep2 = shift(@_);
	my $sep3 = shift(@_);
	$sep1 = "/" unless(defined $sep1); #seperator for date (year/month/day)
	$sep2 = ":" unless(defined $sep2); #seperator for time (hour::minute::second)
	$sep3 = " " unless(defined $sep3); #seperator seperated date and time
	my @r = localtime($time);
	my $year   = $r[5] + 1900;
	my $month  = $r[4]  > 9  ? ($r[4] + 1) : '0' . ($r[4]+1);
	my $day    = $r[3] > 9 ? $r[3] : '0' . $r[3];
	my $hour   = $r[2] > 9 ? $r[2] : '0' . $r[2];
	my $minute = $r[1] > 9 ? $r[1] : '0' . $r[1];
	my $second = $r[0] > 9 ? $r[0] : '0' . $r[0];
	my $clock = "$hour$sep2$minute$sep2$second";
	if((!$style) or ($style == 4)) {
		return "$year$sep1$month$sep1$day$sep3$clock";
	}
	elsif($style == 3) {
		return "$month$sep1$day$sep3$clock";
	}
	elsif($style == 2) {
		return "$day $clock";
	}
	elsif($style == 1) {
		return $clock;
	}
	elsif($style == -1) {
		return "$year$sep1$month$sep1$day";
	}
	elsif($style == -2) {
		return "$month$sep1$day";
	}
	else {
		return "$year$sep1$month$sep1$day$sep3$clock";
	}
}

sub junction {
	my $SRC = shift;
	my $DST = shift;
	my $exit = 0;
	if($ENV{OS} and $ENV{OS} =~ m/Windows/i) {
		if(run("ntfs-link","$DST/$SRC",$SRC)) {
			print STDERR "\t [OK]\n";
			$exit = 0;
		}
		else {
			print STDERR "\t [FAILED]\n";
			$exit = 1;
		}
	}
	else {
		my $name = $SRC;
		$name =~ s/\/+$//;
		$name =~ s/^.*\///;
		my $target = "$DST/$name";
		my $junction = $SRC;
		if(run("ln","-sfT","--",$target,$junction)) {
			print STDERR "\t [OK]\n";
			$exit = 0;
		}
		else {
			print STDERR "\t [FAILED]\n";
			$exit = 1;
		}
	}
	system("ls","-ld","--",$SRC);
	return $exit;
}

sub run {
	#print STDERR "\t@_\n";
	return (system(@_) == 0);
	return 1;
}
sub execute {
	my %OPTS;
	my @ARGV = @_;
	if(@ARGV)
	{
	    require Getopt::Long;
	    Getopt::Long::GetOptionsFromArray(\@ARGV,\%OPTS,@OPTIONS);
	}
	else {
		$OPTS{'help'} = 1;
	}
	if($OPTS{'help'} or $OPTS{'manual'}) {
		require Pod::Usage;
		exit Pod::Usage::pod2usage(-exitval=>"NOEXIT",-verbose=>1);
	}
	if($OPTS{weipai}) {
		$OPTS{exclude} = '[4,5][a-zA-Z0-9]{23}\.jpg$' unless(defined $OPTS{exclude});
	}

	if($OPTS{DI}) {
		unshift @ARGV,'download';
		$OPTS{images} = 1;
	}
	
	my $cmd = shift(@ARGV);
	my $CMD = uc($cmd) if($cmd);
	foreach(@ARGV) {
		s/\/+$//;
	}
	my %COMMANDS = (
		List=>'List videos in specified directory',
		Move=>'Move specified directory',
		Clean=>'Delete videos in specified directory',
		Close=>'Clean, and move specified directory',
		Update=>'Update profile',
		Download=>'Run downloader in directories',
		Files=>'Run sub command against files in directories',
	);
	if(!$CMD) {
		print STDERR "Commands:\n";
		print STDERR "    $_\n                $COMMANDS{$_}\n" foreach(keys %COMMANDS);
		exit 0;
	}
	elsif($CMD eq 'TRASH' || $CMD eq 'T') {
		$OPTS{trash} = 1;
		$CMD = 'CLOSE';
	}
	elsif($CMD eq 'TW') {
		$CMD = 'TOUCH';
		$OPTS{weipai} = 1;
	}
	elsif($CMD eq 'TM') {
		$OPTS{trash} = 1;
		$CMD = 'CLOSE';
		my $arg1 = shift(@ARGV);
		if(@ARGV) {
			$OPTS{into} = $arg1;
		}	
		else {
			@ARGV = ($arg1);
		}
	}
	elsif($CMD eq 'DI') {
		$OPTS{images} = 1;
		$CMD = 'DOWNLOAD';
	}
	elsif($CMD eq 'DW') {
		$OPTS{worker} = 1;
		$OPTS{sites} ||= 'weipai.cn'; 
		$CMD = 'DOWNLOAD';
	}
	elsif($CMD eq 'D') {
		$CMD = 'DOWNLOAD';
	}
	elsif($CMD eq 'F') {
		$CMD = 'FILES';
	}
	elsif($CMD eq 'FNAME' or $CMD eq 'FN') {
		$CMD = 'FILES';
		unshift @ARGV,'rename';
		$OPTS{fullname} = 1;
	}
	
	if((!$OPTS{norc}) and -f ".babes.rc" and open FI,'<',".babes.rc") {
		print STDERR "Reading .babes.rc ...\n";
		foreach(<FI>) {
			chomp;
			next unless($_);
			if(m/\s*([^=]+?)\s*=\s*(.*?)\s*$/) {
				$CONF{$1} = $2;
			}
			else {
				s/^\s+//;
				s/\s+$//;
				$CONF{$1} = 1;
			}
		}
		close FI;
		printf STDERR "  %-20s %s\n","<$_> :",$CONF{$_} foreach(keys %CONF);
		print STDERR "OK.\n";
	}
	my $pref_dbdir = Babes::get_pref('database-dir');
	if($pref_dbdir) {
		@DATABASE_DIR = split(":",$pref_dbdir);
	}

	if($CMD eq 'LIST') {
		exit Babes::List::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'MOVE') {
		#require Babes::Move;
		exit Babes::Move::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'CLEAN') {
		exit Babes::Clean::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'UPDATE') {
		exit Babes::Update::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'CLOSE') {
		exit Babes::Close::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'DOWNLOAD') {
		exit Babes::Download::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'RENAME') {
		exit Babes::Rename::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'FOLLOW') {
		exit Babes::Follow::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'SHOTS') {
		exit Babes::Shots::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'TOUCH') {
		exit Babes::Touch::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'PLAY') {
		exit Babes::Play::process(\%OPTS,@ARGV);
	}
	elsif($CMD eq 'FILES') {
		exit Babes::Files::process(\%OPTS,@ARGV);
	}
	else {
		die("Command not found: $cmd\n");
	}

}

sub Import {
	foreach(keys %main::) {
		print STDERR $_,"\n";	

	}
}


1;
#######################################################################
package Babes::Play;
sub process {
	my $OPTS = shift;
	if($OPTS->{list}) {
		foreach(@_) {
			my @files = Babes::Files::get($OPTS,$_);
			if(@files) {
				print STDERR join("\n","Playing <$_>:","="x40,@files,"="x40),"\n";
				system('mplayer.bat','-nosub',@files);
			}
		}
	}
	else {
		system('cyg_kmplayer',@_);
	}
	return 0;
}
1;
#######################################################################
package Babes::Touch;
sub process {
	my $OPTS = shift;
	if($OPTS->{weipai}) {
		$OPTS->{find} = '\.(?:jpg|gif|png)$' unless(defined $OPTS->{find});
		$OPTS->{replace} = '.mp4' unless(defined $OPTS->{replace});
		$OPTS->{empty} = 0;
	}
	elsif($OPTS->{vlook}) {
		$OPTS->{find} = '\.(?:jpg|gif|png)$' unless(defined $OPTS->{find});
		$OPTS->{replace} = '.mp4' unless(defined $OPTS->{replace});
		$OPTS->{empty} = 0;
	}
	foreach my $dir (@_) {
		print STDERR "Touching files in $dir ...\n";
		my @files = Babes::Files::get($OPTS,$dir);
		foreach(@files) {
			my $target = $_;
			if($OPTS->{find}) {
				$target =~ s/$OPTS->{find}/$OPTS->{replace}/g;
			}
			print STDERR "Touching: $target\n";
			system("touch","--",$target);
		}
	}
	return 0;
}

1;
#######################################################################
package Babes::Shots;

sub process_dir {
	my $OPTS = shift;
	my @files = Babes::List::get_videos_without_images(@_);
	my  @prog = ($OPTS->{mplayer},'-nosound');
	push @prog,'-ss', $OPTS->{start} ? $OPTS->{start} : 0;
	push @prog, '-frames', 1;
	push @prog,(qw/
			-vf screenshot
			-vo	jpeg
		/);
	foreach(@files) {
		my @dirs = split(/\//,$_);
		my $basename = pop(@dirs);
		$basename =~ s/\.[^\.]+$//;
		system(@prog,'--',$_);
		system('mv','-v','--','00000001.jpg', join("/",@dirs,$basename) . ".jpg");
	}
}

sub process {
	my $OPTS = shift;
	my $mplayer;
	if(!$OPTS->{mplayer}) {
		foreach (qw/mplayer mplayer.exe mplayer.bat/) {
			my $which = `which $_ 2>/dev/null`;
			chomp($which);
			if($which) {
				$mplayer = $which;
				last;
			}
		}
		if(!$mplayer) {
			die("Mplayer binary not found!\n");
		}
		$OPTS->{mplayer} = $mplayer;
	}
	foreach(@_) {
		process_dir($OPTS,@_);
	}
	return 0;
}
1;
#######################################################################


package Babes::Follow;
sub unfollow {
	my $OPTS = shift;
	my @names = @_;
	my @files = Babes::Database::collect_files($OPTS,'follows.txt','follows.sq');
	my $edit = 0;
	foreach(@names) {
		my $r = Babes::Editor::process(
			{once=>1,ontop=>1},
			'^' . '(' . 
				'[^#][^\s]+\s+' . $_ . '|' .
				'[^#]' . $_ . 
			')$',
			'#$1',
			@files
		);
		if($r == 0) {
			$edit = 1;
		}
		else {
			print STDERR "Warning: $_ not found in files!\n";
		}
	}
	return 0 if($edit);
	return 1;
}

sub process {
	my $OPTS = shift;
	if($OPTS->{unfollow}) {
		return unfollow($OPTS,@_);
	}
}

1;
#######################################################################
package Babes::Rename;
use File::Spec::Functions qw/catfile catdir/;
use File::Glob qw/bsd_glob/;
use strict;

#/myplace/workspace/perl/urlrule/sites

sub edit_file {
	my $old = shift;
	my $new = shift;
	my $edited;
	foreach my $file (@_) {
		my $modified;
		my @data;
		#print STDERR "    $file ...\n";
		if(! -f $file) {
			print STDERR "    Ignored, file not exist: $file\n";
			next;
		}
		elsif(open FI,'<',$file) {
			foreach my $line (<FI>) {
				my $linechanged;
				chomp($line);
				my @cols = split(/\s*\t\s*/,$line);
				foreach my $col(@cols) {
					if($col eq $old) {
						$col = $new;
						$modified = 1;
						$linechanged = 1;
					}
				}
				if($linechanged) {
					my $newline = join("\t",@cols);
					print STDERR "    $line\n  =>",join("\t",@cols),"\n";  
					$line = $newline;
				}
				push @data,$line,"\n";
			}
			close FI;
			if($modified) {
				$edited = 1;
				if(open FO,'>',$file) {
					print FO @data;
					close FO;
					print STDERR "  Modified $file\n";
				}
				else {
					print STDERR "  Error opening $file: $!\n";
				}
				
			}
		}
		else {
			print STDERR "  Error opening $file: $!\n";
			next;
		}
	}
	return $edited ? 0 : 1;
}

sub run {
	goto &Babes::run;
}

sub collect_files {
	my $OPTS = shift;
	my $dirname = shift;
	
	my @EXPS;
	foreach my $dir(@Babes::DATABASE_DIR) {
		push @EXPS,catdir($dir,'*','database.sq');
		push @EXPS,catdir($dir,'*','follows.sq');
		push @EXPS,catdir($dir,'*','follows.txt');
	}
	my @files;
	foreach my $exp(@EXPS) {
		foreach my $file(bsd_glob($exp)) {
			if($OPTS->{sites}) {
				if($file !~ m/$OPTS->{sites}/i) {
					#print STDERR "  Not match /$OPTS->{sites}/, ignored: $file\n";
					next;
				}
			}
			#print STDERR "  Collected file: $file\n";
			push @files,$file;
		}
	}
#	die(join("\n",@files),"\n");
	return @files;
}

sub process {
	my $OPTS = shift;
	my $oldname = shift;
	my $newname = shift;
	if($OPTS->{reposter}) {
		if(!$newname) {
			$newname = "#Reposter/$oldname";
		}
		else {
			$newname = "#Reposter/$newname";
		}
	}
	if($OPTS->{revert}) {
		($oldname,$newname) = ($newname,$oldname);
	}
	if($OPTS->{weipai}) {
		my $dir = $oldname;
		my $prefix = $newname || $oldname;
		my @files = Babes::List::get_medias($oldname);
		foreach(@files) {
			my $old = $_;
			my $new = $old;
			if(m/^(.+)\/${prefix}_([^\/]+)$/) {
				print STDERR "  Nothing to do for $_\n";
				next;
			}
			elsif(m/^${prefix}_([^\/]+)$/) {
				print STDERR "  Nothing to do for $_\n";
				next;
			}
			elsif(m/^(.+)\/${oldname}_([^\/]+)$/) {
				$new = $1 . '/' . $prefix . '_' . $2;
			}
			elsif(m/^${oldname}_([^\/]+)$/) {
				$new = $1 . '/' . $prefix . '_' . $2;
			}
			elsif(m/^(.+)\/([^\/]+)$/) {
				$new = $1 . '/' . $prefix . '_' . $2;
			}
			else {
				$new = $prefix . '_' . $old;
			}
			if(!($new eq $old)) {
				print STDERR "Renaming $old\n  => $new\n";
				system("mv",'--',$old,$new);
			}
		}
		return 0;
	}
	print STDERR "Renaming $oldname => $newname\n";
	my @files = collect_files($OPTS,$oldname);
	my $exit1 = edit_file($oldname,$newname,@files);
	
	my $exit2 = 0;

	if($OPTS->{move}) {
		delete $OPTS->{reposter};
		print STDERR "Moving directory $oldname => $newname\n";
		$exit2 = Babes::Move::cmd_mv($oldname,$oldname,$newname);
		#run('mv','-v','--',$oldname,$newname) ? 0 : 1;
	}
	return 1 if($exit1 or $exit2);
	return 0;
}

1;
#######################################################################

package Babes::Move;
use File::Spec::Functions qw/catfile catdir/;
use strict;

our $MOVE_TRASH_DIR = '#Trash';
our $MOVE_CLIPS_DIR = '#Clips';
our $MOVE_REPOSTER_DIR = '#Reposter';
sub run {
	goto &Babes::run;
}

sub move_to {
	my $OPTS = shift;
	my $dstd = shift;
	my %clips;
	my $exit = 0;
	if($OPTS->{clips} or $OPTS->{trash} or $OPTS->{into}) {
		foreach my $srcd (@_) {
#			print STDERR $srcd,"\n";
			foreach my $file (glob("$srcd/*/*/*.*")) {
#				print STDERR $file,"\n";
				if($file =~ m/^(.*?([^\/]+)\/[^\/]+\/([^\/]+))\/([^\/]+?)\.(mov\.3in1\.jpg|mov|flv|mp4|f4v|mpeg|png|gif|jpg|ts)$/) {
					if($OPTS->{'same-directory'}) {
						$clips{$file} = "$1/$2_$4_$3.$5";
					}
					else {
						$clips{$file} = "$2_$4_$3.$5";
					}
				}
			}
		}
	}

	if(!$OPTS->{'same-directory'}) {
		return 2 unless(&Babes::create_dir($dstd,"  Error creating $dstd\n"));
	}
	else {
		$dstd = '#SAME DIRECTORY#';
	}

	if($OPTS->{clips} or $OPTS->{into}) {
		print STDERR "  Move files into <$dstd>:\n";
		print STDERR "\tNothing to do,  files not found\n" unless(%clips);
		foreach my $src (keys %clips) {
			my $dst = $OPTS->{'same-directory'} ? $clips{$src} : catfile($dstd,$clips{$src});
			print STDERR "    <= " . $clips{$src} . "\n";
			$exit = run('mv','--',$src,$dst);
		}
		if($OPTS->{clips}) {
			$dstd = $MOVE_TRASH_DIR;
			return 2 unless(&Babes::create_dir($dstd));
		}
	}
	elsif($OPTS->{trash}) {
		print STDERR "  Delete files in:\n";
		print STDERR "\tNothing to do,  files not found\n" unless(%clips);
		foreach my $src (keys %clips) {
			print STDERR "    XX $src\n";
			$exit = run('rm','--',$src);
		}
	}
	if($OPTS->{into}) {
		foreach(@_) {
			if(open FO,'>>',catfile($_,'move_into.txt')) {
				print FO '' . &Babes::strtime() . ": <" . $dstd . ">\n";
				print FO "\t" . join("\n\t",keys %clips) . "\n";
				close FO;
			}
		}
	}
	else {
		print STDERR "  Move directories into <$dstd>:\n";
		foreach(@_) {
			print STDERR "    <= $_\n";
			$exit = cmd_mv($_,$_,$dstd);
		};
	}

	return ($exit == 0);
}

sub cmd_mv {
	my $test = shift;
	my $src = shift;
	my $dst = shift;
	if($test =~ m/[\/\\]/) {
		return run('mv','-T','--',$src,$dst . '/' . $src);
	}
	else {
		return run('mv','-t',$dst,'--',$src);
	}
}


sub process {
	my $OPTS = shift;
our $MOVE_TRASH_DIR = Babes::get_pref('trash-dir','#Trash');
our $MOVE_CLIPS_DIR = Babes::get_pref('clips-dir','#Clips');
our $MOVE_REPOSTER_DIR = Babes::get_pref('reposter-dir','#Reposter');

	my $exit;

	my $DST = shift;
	if(!@_) {
		unshift @_,$DST;
		$DST = '';
	}

	if(!@_) {
		die("Usage: \n" .
			"  $0 move [options] target_directory source_directory ...\n" .
			"  $0 move [--clips|--reposter|--trash] directories ...\n"
		);
	}


	print STDERR "[",join("] [",@_),"] \n";
	if($OPTS->{into}) {
			my $dpre = $OPTS->{'into-prefix'} || Babes::get_pref("into-prefix");
			$OPTS->{into} = catdir($dpre,$OPTS->{into}) if($dpre);
			$exit = move_to($OPTS,$OPTS->{into},@_);
			delete $OPTS->{into};
	}

	if($OPTS->{clips}) {
		return move_to($OPTS,$MOVE_CLIPS_DIR,@_);
	}
	elsif($OPTS->{reposter}) {
		return move_to($OPTS,$MOVE_REPOSTER_DIR,@_);
	}
	elsif($OPTS->{trash}) {
		return move_to($OPTS,$MOVE_TRASH_DIR,@_);
	}
	if(!$DST) {
		return $exit;
	}

	
	my $dpre = $OPTS->{'move-prefix'} || Babes::get_pref("move-prefix");
	$DST = catdir($dpre,$DST) if($dpre);
#	print STDERR "DST: $DST\n";return;

	foreach my $SRC (@_) {
		print STDERR "  [$SRC] Moving to $DST/\n";
		if(-l $SRC) {
			my $link = readlink($SRC);
			print STDERR "  [$SRC] is a symbol link to $link\n";
			return 2 unless(&Babes::create_dir($DST));
			if(cmd_mv($SRC,$link,$DST)) {
				print STDERR "  Move [$SRC]$link to $DST\n";
			}
			else {
				print STDERR "  Error move $link to $DST/\n";
				next;
			}
			if(unlink $SRC) {
				print STDERR "  Un-link $SRC\n";
			}
			else {
				print STDERR "  Error Un-link $SRC\n";
				next;
			}
			$OPTS->{'no-junction'} = undef;
		}
		if((!-d $SRC) and (-d $DST) and (!$OPTS->{'no-junction'})) {
			$exit = Babes::junction($SRC,$DST);
		}
		elsif(! -d $SRC) {
			print STDERR "	Ignored, [$SRC] is not a directory\n";
			next;
		}
		elsif(! -d $DST) {
			print STDERR "	Error, [$DST] directory not exist\n";
			next;
		}
		else {
			return 2 unless(&Babes::create_dir($DST));
			if(cmd_mv($SRC,$SRC,$DST)) {
				print STDERR "\t [OK]\n";
				if(!$OPTS->{'no-junction'}) {
#					print STDERR "[$SRC] LINK=> $DST \n";
					$exit = Babes::junction($SRC,$DST);
				}
			}
			else {
				print STDERR "\t [FAILED]\n";
				$exit = 1;
			}
		}	
	}
	return $exit;
}

1;

#######################################################################

package Babes::List;

use strict;
use warnings;
use utf8;
use File::Spec::Functions qw/catfile catdir/;
use File::Glob qw/bsd_glob/;
use Cwd qw/getcwd/;
$SIG{INT} = sub {
	die();
};
my %CACHED;
sub run {
	goto &Babes::run;
}

sub _glob_files {
	my $pat = shift;
	if(defined $CACHED{$pat}) {
		return @{$CACHED{$pat}};
	}
	else {
		return bsd_glob($pat);
	}
}

sub list_dup_site {
	my $site = shift;
	my $dir = shift;
	my $name = shift;
	my $processed;
	my $cwd_kept = getcwd;
	foreach(_glob_files(catfile($dir,'*'))) {
		next if(m/^\./);
		next unless(-d $_);
		list_dup_file($_);
		chdir $cwd_kept;
		$processed = 1;
	}
	if(!$processed) {
		print STDERR "[$site] No ID found for $name\n";
	}
}
sub list_dup_dir {
	my $dir = shift;
	my $processed;
	foreach(_glob_files($dir . '/*')) {
		next unless(-d $_);
		if(m/\/(vlook\.cn|weipai\.cn)\/?$/) {
			list_dup_site($1,$_,$dir);
			$processed = 1;
		}
	}
	if(!$processed) {
		print STDERR "Error no sites ID found for $dir\n";
	}
}

sub list_dup_file {
	my $dir = shift;
	my @files;
	my %exps;
	my %dups;
	chdir $dir;
	foreach (glob("*.*")) {
		push @files,$_;
		next if(m/\.jpg/);
		if(m/^(\d{8})\d\d_(.+)\.[^\.]+$/) {
			$exps{$1 . '\d*_' . $2 . '\[\d+[^\[\]]+\]\.'} = $_;
		}
	}
	foreach(@files){
		foreach my $exp(keys %exps) {
			if(m/$exp/) {
				$dups{$exps{$exp}} =[] unless($dups{$exps{$exp}});
				push @{$dups{$exps{$exp}}},$_;
			}
		}
	}
	foreach my $kept (keys %dups) {
		print STDERR $kept,"\n";
		foreach my $dup(@{$dups{$kept}}) {
			print STDERR "  [X]$dup\n"; 
		}
	}
	print STDERR "\n" . "X"x80 . "\n";
	foreach my $kept (keys %dups) {
		foreach my $dup(@{$dups{$kept}}) {
			print "$dir/$dup\n"; 
		}
	}
	return %dups;
}


sub list_files_exclude_exts {
	my $dir = shift;
	my $include = shift;
	my @exts = @_;
	my @subdirs;
	my @result;
	my %files;
	my %selected;
#	print STDERR "Processing $dir/\n";
	foreach (_glob_files("$dir/*")) {
		#print STDERR $_,"\n";
		$files{$_} = 1;
		next if(m/\.$/);
		if(-d $_) {
			push @subdirs,$_;
		}
		elsif(m/$include/) {
			$selected{$_} = $1;
		}
	}
	if(@exts) {
		foreach(keys %files) {
			next unless ($selected{$_});
			my $basename = $selected{$_};
			my $excluded;
			foreach my $ext(@exts) {
				if($files{$basename . $ext}) {
					$excluded = 1;
					last;
				}
			}
			push @result,$_ unless($excluded);
		}
	}
	else {
		push @result,keys %selected;
	}
	foreach(@subdirs) {
		push @result,list_files_exclude_exts($_,$include,@exts);
	}
	return @result;
}

sub get_images_without_videos {
	my $dir = shift;
	return list_files_exclude_exts(
		$dir,
		qr/^(.+)\.(?:mov\.3in1\.jpg|\d+\.jpg|p\.\d+\.jpg|jpg|png|gif)$/,
		qw/
			.mov
			.avi
			.mp4
			.flv
			.f4v
			.mpg
			.mpeg
			.3gp
			.ts
			.wmv
			.rmvb
			.rm
		/
	);
}

sub get_videos_without_images {
	my $dir = shift;
	return list_files_exclude_exts(
		$dir,
		qr/^(.+)\.(?:mov|mp4|avi|flv|f4v|mpg|mpeg|3gp|ts|wmv|rmvb|rm)$/,
		qw/
			.mov.3in1.jpg
			.jpg
			.png
			.gif
			.1.jpg
			.2.jpg
			.3.jpg
			.4.jpg
			.5.jpg
			.p.jpg
			.p.1.jpg
			.p.2.jpg
			.p.3..jpg
			.p.4.jpg
			.p.5.jpg

		/,
	);
}

sub get_files_empty {
	my $dir = shift;
	my @files = list_files($dir);
	my @result;
	foreach(@files) {
		if((stat($_))[7] == 0) {
			push @result,$_;
		}
	}
	return @result;
}

sub get_files {
	goto &list_files;
}
sub get_dirs {
	my $dir = shift;
	my $filter = shift;
	my $msg = shift;
	return list_files($dir,$filter,$msg,{directory=>1});

}
sub list_files {
	my $dir = shift;
	my $filter = shift;
	my $msg = shift;
	my $opts = shift(@_) || {};

	print STDERR "Processing $dir  " if($msg);
	my @subdirs;
	my @result;
	foreach (_glob_files("$dir/*")) {
		next if(m/\.$/);
		if(-d $_) {
			push @subdirs,$_;
			next unless($opts->{directory});
		}
		else {
			next if($opts->{directory});
		}
		if(!$filter) {
			push @result,$_;
		}
		elsif(m/$filter/i) {
			push @result,($1 ? $1 : $_);
		}
	}
	print STDERR "[" . scalar(@result) . " file(s)]\n" if($msg);
	foreach(@subdirs) {
		push @result,list_files($_,$filter,$msg,$opts);
	}
	return @result;
}
sub get_videos {
	my $dir = shift;
	my $filter = shift(@_) || '\.(?:mov|mp4|avi|flv|f4v|mpg|mpeg|3gp|ts)$';
	return get_files($dir,$filter);
}

sub get_medias {
	my $dir = shift;
	my $filter = shift(@_) || '\.(?:mov|mp4|avi|flv|f4v|mpg|mpeg|3gp|ts|jpg|png|gif)$';
	return get_files($dir,$filter);
}

sub process {
	my $OPTS = shift;
	$OPTS->{list} = 1;
	return Babes::Clean::process($OPTS,@_);
}

1;

#######################################################################
package Babes::Files;
sub get {
	my $OPTS = shift;
	if($OPTS->{weipai} || $OPTS->{vlook}) {
		$OPTS->{empty} = 1 unless(defined $OPTS->{empty});
		$OPTS->{'images-without-videos'} = 1 unless(defined $OPTS->{'images-without-videos'});
	}
	my @result;
	foreach(@_) {
		print STDERR "Processing [$_] ...\n";
		my $done;
		if($OPTS->{empty} || $OPTS->{zero}) {
			$done = 1;
			push @result,Babes::List::get_files_empty($_);
		}
		if($OPTS->{duplicated}) {
			$done = 1;
			push @result,Babes::List::get_duplicated($_,1);
		}
		if($OPTS->{'images-without-videos'}) {
			$done = 1;
			push @result,Babes::List::get_images_without_videos($_);
		}
		if($OPTS->{'videos-withou-images'}) {
			$done = 1;
			push @result,Babes::List::get_videos_without_images($_);
		}
		if($done) {
		}
		elsif($OPTS->{medias}) {
			push @result,Babes::List::get_files($_,'\.(?:mov|mp4|avi|flv|f4v|mpg|mpeg|3gp|ts|jpg|png|gif)$');
		}
		elsif($OPTS->{directories}) {
			push @result,Babes::List::get_dirs($_,$OPTS->{filter});
		}
		elsif($OPTS->{all}) {
			push @result,Babes::List::get_files($_);
		}
		elsif($OPTS->{filter}) {
			push @result,Babes::List::get_files($_,$OPTS->{filter});
		}
		else {
			push @result,Babes::List::get_files($_);
		}
	}
	if($OPTS->{include}) {
		@result = grep /$OPTS->{include}/,@result;
	}
	if($OPTS->{exclude}) {
		@result = grep !/$OPTS->{exclude}/,@result;
	}
	return @result;
}

sub files_rename {
	my $OPTS = shift;
	if($OPTS->{fullname}) {
		my $ok = 1;
		my $rexp = qr/([^\/]+)\/([^\/]+)\/([^\/]+)\/([^\/]+)$/;
		foreach(@_) {
			my $oldname = $_;
			if($OPTS->{revert}) {
				s/([^\/]+)_([^\/]+)_(\d\d\d\d\d+[^\/]+)$/$3/;
			}
			else {
				s/([^\/]+)\/([^\/]+)\/([^\/]+)\/(\d\d\d\d\d+[^\/]+)$/$1\/$2\/$3\/$1_$3_$4/;
			}
			
			if($oldname ne $_) {
				if(-f $_) {
					print STDERR "File exists: $_\n";
					return 2;
				}
				$ok = 0;
				system(qw/mv -v --/,$oldname,$_);
			}			
		}
		return $ok;
	}
}


sub process {
	my $OPTS = shift;
	my $command = shift;
	my $CMD = uc($command);
	if(!$CMD) {
		print STDERR "No command specified for files\n";
		return 1;
	}
	my @files = get($OPTS,@_);
	if($CMD eq 'RENAME') {
		return files_rename($OPTS,@files);
	}
}

1;

#######################################################################
package Babes::Update;
use strict;
use warnings;
use File::Spec::Functions qw/catfile catdir/;
use Cwd qw/getcwd/;

sub process_weipai {
	my $OPTS = shift;
	my $dir = shift;
	my $name = shift;
#	my $cwd = getcwd;
#	if(!chdir $dir) {
#		print STDERR "Error entering directory $dir:$!\n";
#		return 1;
#	}
	my $processed;
	foreach(glob(catfile($dir,'*'))) {
		next if(m/^\./);
		next unless(-d $_);
		my $id = $_;
		$id =~ s/.*[\/\\]//g;
		print STDERR "[$name] Saving profile ($id)\n";
		if((!$OPTS->{force}) and -f "$id.txt" and -f "$id.jpg") {
			print STDERR "	Ignored, profile files exist\n";
		}
		else {
			system("weipai","save-profile",$id);
		}
		$processed = 1;
	}
#	chdir($cwd);
	if(!$processed) {
		print STDERR "	Error, No weipai ID found for $name\n";
	}
}
sub process_dir {
	my $OPTS = shift;
	my $dir = shift;
	my $cwd = getcwd;
	if(!chdir $dir) {
		print STDERR "Error entering directory $dir:$!\n";
		return 1;
	}
	my $processed;
	foreach(glob('*')) {
		if(m/^(weipai\.cn)$/) {
			process_weipai($OPTS,$_,$dir);
			$processed = 1;
		}
	}
	chdir $cwd;
	if(!$processed) {
		print STDERR "Error not profile found for $dir\n";
	}
}

sub process {
	my $OPTS = shift;
	foreach(@_) {
		if(-d $_) {
			#	print STDERR "\nProcessing $_\n";
			process_dir($OPTS,$_);
		}
		else {
			#print STDERR "Error not a directory:$_\n";
		}
	}
}
1;

#######################################################################
package Babes::Clean;

sub process_result {
	my $OPTS = shift;
	my $dir = shift;
	my $desc = shift;
	print STDERR " >Directory: $dir\n";
	print STDERR " >For $desc:\n";
	print STDERR " >Get " . scalar(@_) . " result\n";
	if($OPTS->{list}) {
		print $_,"\n" foreach(@_);
	}
	else {
		my @cmd = $OPTS->{dryrun} ? ('echo','rm','-v','--') : ('rm','-v','--');
		&Babes::run(@cmd,$_) foreach(@_);
	}
	return 0 if(@_);
}
sub process {
	my $OPTS = shift;
	if($OPTS->{weipai}) {
		$OPTS->{empty} = 1 unless(defined $OPTS->{empty});
		$OPTS->{'images-without-videos'} = 1 unless(defined $OPTS->{'images-without-videos'});
	}
	foreach(@_) {
		print STDERR "Processing [$_] ...\n";
		my @result;
		if($OPTS->{all}) {
			return process_result($OPTS,$_,
				'All media files',
				Babes::List::get_videos($_)
			);
		}
		else {
			if($OPTS->{empty} || $OPTS->{zero}) {
				process_result($OPTS,$_,
					'Empty files',
					Babes::List::get_files_empty($_)
				);
			}
			if($OPTS->{duplicated}) {
				process_result($OPTS,$_,
					'Duplicated files',
					Babes::List::get_duplicated($_,1)
				);
			}
			if($OPTS->{'images-without-videos'}) {
				process_result($OPTS,$_,
					'Images files without related videos',
					Babes::List::get_images_without_videos($_)
				);
			}
			if($OPTS->{'videos-without-images'}) {
				process_result($OPTS,$_,
					'Videos files without related images',
					Babes::List::get_videos_without_images($_)
				);
			}
		}
	}
	return 0;
}
1;

#######################################################################
package Babes::Editor;

sub process {
	my $OPTS = shift;
	my $find = shift;
	my $replace = shift;
	my $edited;
	print STDERR ("Searching: $find \nReplace with: $replace\n");
	foreach my $file (@_) {
		my $modified;
		my @data;
		#print STDERR "    $file ...\n";
		if(! -f $file) {
			print STDERR "    Ignored, file not exist: $file\n";
			next;
		}
		elsif(open FI,'<',$file) {
			foreach my $line (<FI>) {
				chomp($line);
				if($modified and $OPTS->{once}) {
					push @data,$line,"\n";
				}
				elsif($line =~ m/$find/) {
					my $newline = $line;
					eval "no utf8;\$newline =~ s/$find/$replace/g;";
					warn $@ if $@;	
					if($newline eq $line) {
						push @data,$line,"\n";
						warn "Line: $line\n";
						warn "\tMatch /$find/\n";
						warn "\tBut remain the same, for /$replace/\n";
					}
					else {
						print STDERR "    $line\n  =>\t$newline\n";
						$line = $newline;
						$modified = 1;
						if($OPTS->{ontop}) {
							unshift @data,$line,"\n";
						}
						else {
							push @data,$line,"\n";
						}
					}
				}
				else {
					push @data,$line,"\n";
				}

			}
			close FI;
			if($modified) {
				$edited = 1;
				if(open FO,'>',$file) {
					print FO @data;
					close FO;
					print STDERR "  Modified $file\n";
				}
				else {
					print STDERR "  Error opening $file: $!\n";
				}
				
			}
		}
		else {
			print STDERR "  Error opening $file: $!\n";
			next;
		}
		$edited = 1 if($modified);
	}
	return $edited ? 0 : 1;
}
1;

#######################################################################
package Babes::Database;
use File::Spec;
use File::Glob qw/bsd_glob/;
sub collect_files {
	my $OPTS = shift;
	my @basenames = @_ ? @_ : (qw/database.sq follows.sq follows.txt/);
	my @EXPS;
	foreach my $dir(@Babes::DATABASE_DIR) {
		foreach(@basenames) {
			push @EXPS,File::Spec->catdir($dir,'*',$_);
		}
	}
	my @files;
	foreach my $exp(@EXPS) {
		foreach my $file(bsd_glob($exp)) {
			if($OPTS->{sites}) {
				if($file !~ m/$OPTS->{sites}/i) {
					#print STDERR "  Not match /$OPTS->{sites}/, ignored: $file\n";
					next;
				}
			}
#			print STDERR "  Collected file: $file\n";
			push @files,$file;
		}
	}
#	die(join("\n",@files),"\n");
	return @files;
}
1;

#######################################################################
package Babes::Shared;
use MyPlace::Script::Message;
sub ddd {
	die();
}

1;

#######################################################################
package Babes::Trash;
use MyPlace::Script::Message;
MyPlace::Script::Message::prompt('Babes::Trash>');
sub process {
	my $OPTS = shift;
	my @names = @_;
	my @files = Babes::Database::collect_files($OPTS,'follows.txt','follows.sq','database.sq');
	my $edit = 0;
	my $FO;
	if(open $FO,'>>','#TRASH.txt') {
	}
	else {
		print STDERR "Error: $!\n";
	}
	foreach(@names) {
		my $r = Babes::Editor::process({once=>1},'^([^#][^\s]+)\s+(' . $_ . ')$','$1' . "\t" . '#Trash\/$2',@files);
		if($r == 0) {
			$edit = 1;
		}
		else {
			print STDERR "Warning: $_ not found in files!\n";
		}
		if(defined $FO) {
			my @dirs = ($_,Babes::List::get_dirs($_));
			&app_warning("Writting names to <#TRASH.txt> ...\n");
			&app_warning("#TRASH.txt <<<\n");
			foreach my $subdir(@dirs) {
				&app_warning("    ",$subdir,"\n");
				print $FO $subdir,"\n";
			}
			&app_warning("<<<\n");
		}	

	}
	close $FO if(defined $FO);
	return 0 if($edit);
	return 1;
}
1;

#######################################################################
package Babes::Close;
sub process {
	my $OPTS = shift;
	my $DST;
	my %lopts = (%$OPTS);
	$OPTS = \%lopts;
	if($OPTS->{trash} or $OPTS->{reposter} or $OPTS->{clips}) {
		delete $OPTS->{junction};
	}
	else {
		$OPTS->{junction} = 1;
		$DST = shift;
	}

	#my $INTO = $OPTS->{into};
	#delete $OPTS->{into};

	if(!@_) {
		die("Usage: $0 close [options] target_directory source_directory\n");
	}
	
	foreach my $SRC (@_) {
		if($OPTS->{'mkdir'}) {
			if(! -d $SRC) {
				print STDERR "[$SRC] creating directory";
				if(mkdir $SRC) {
					print STDERR "\t[OK]\n";
				}
				else {
					print STDERR "\t[FAILED]\n";
					next;
				}
			}

		}
		Babes::Clean::process($OPTS,$SRC) if($OPTS->{'clean'});

		if($OPTS->{'trash'}) {
			Babes::Trash::process($OPTS,$SRC);
		}
		else {
			if($OPTS->{'unfollow'}) {
				Babes::Follow::unfollow($OPTS,$SRC);
			}
			Babes::Update::process($OPTS,$SRC);
		}
		

		if($DST) {
			Babes::Move::process($OPTS,$DST,$SRC);
		}
		else {
			Babes::Move::process($OPTS,$SRC);
		}
#		if($OPTS->{junction} and $INTO) {
#			my %llopts = (%$OPTS);
#			delete $llopts{junction};
#			$llopts{into} = $INTO;
#			Babes::Move::process(\%llopts,$SRC);
#		}
	}
}
1;
#######################################################################

package Babes::Download;
use strict;
use warnings;

sub process {
	my $OPTS = shift;
	if(!@_) {
		die("Usage:\n  $0 download [options] directories...\n");
	}
	my @prog;
	push @prog,'--no-download' if($OPTS->{'no-download'});
	push @prog,'--retry' if($OPTS->{retry});
	push @prog,'--images' if($OPTS->{images});
	push @prog,'--videos' if($OPTS->{videos});
	push @prog,'--include',$OPTS->{include} if($OPTS->{include});
	push @prog,'--exclude',$OPTS->{exclude} if($OPTS->{exclude});

	my @sites;
	foreach my $s(qw/miaopai.com weipai.cn meipai.com weibo.com moko.cc/) {
		my $sn = $s;$sn =~ s/\.[^\.]+$//;
		if($OPTS->{$s} or $OPTS->{$sn}) {
			$OPTS->{worker} = 1;
			push @sites,$s;
		}
	}
	push @sites,split(/\s*,\s*/,$OPTS->{sites}) if($OPTS->{sites});
	if($OPTS->{worker}) {
		my $sites_exp = @sites ? join(',',@sites) : '*';
		unshift @prog,('urlrule_worker','sites',$sites_exp,'DOWNLOADER');	
		push @prog,'--';
	}
	else {
		unshift  @prog,('mdown','--recursive');
		push @prog,'--touch' if($OPTS->{touch});
		push @prog,'-d';
	}
	my $exit = 0;
	foreach(@_) {
		$exit = &Babes::run(@prog,$_);
	}
	return $exit;
}
1;
#######################################################################
&Babes::execute(@ARGV);

__END__

=pod

=head1  NAME

babes - PERL script

=head1  SYNOPSIS

babes <command> [options] ...

=head1  OPTIONS

=over 12

=item B<--no-cover>,B<--nc>

List vidoes without cover image

=item B<--junction>

Create junction for directory

=item B<--duplicated>,B<--dup>

List video files duplicated others

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=back

=head1  DESCRIPTION

___DESC___

=head1  CHANGELOG

    2015-02-23 01:45  xiaoranzzz  <xiaoranzzz@MyPlace>
        
        * file created.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@MyPlace>

=cut

#       vim:filetype=perl
