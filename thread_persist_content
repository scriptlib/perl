#!/usr/bin/perl -w
###APPNAME:     thread_persist_content
###APPAUTHOR:   duel
###APPDATE:	2009-01-29 02:50:08
###APPVER:	0.1
###APPDESC:     thread_persist_content	
###APPUSAGE:    [urls|files]	
###APPEXAMPLE:	thread_persist_content
###APPOPTION:	
use strict;

#ENV variable MUST be defined somewhere,
#FOR perl to search modules from,
#OR nothing will work
use lib $ENV{XR_PERL_MODULE_DIR};

use MyPlace::Script::Usage qw/help_required help_even_empty/;
exit 0 if(help_required($0,@ARGV));
#exit 0 if(help_even_empty($0,@ARGV));

use HTML::TreeBuilder;
use MyPlace::HTML::Convertor;
use Encode qw/decode/;
binmode STDERR,"utf8";

my $body_id = shift;
my $user = shift;
my $pass = shift;
$user ||= "keyduel";
$pass ||= "absfreedom";
my @files = @ARGV;
unless(@files) {while(<>){chomp;push @files,$_;}}

die("No files specified\n") unless(@files);

sub get_title {
    my $tree = shift;
    my ($title) = $tree->look_down("_tag","title");
    if($title) {
        return $title->as_text();
    }
    return undef
}

sub uniq_filename($$) {
    my $base=shift;
    my $ext=shift;
    my $inc = "";
    while(-f "$base$inc$ext") {
        $inc = $inc ? $inc + 1 : 1;
    }
    return "$base$inc$ext";
}

sub download_url {
    my($url,$file) = @_;
    return 1 if(-f $file);
    open FI,"-|","netcat_autologin",$url,$user,$pass or return undef;
    open FO,">",$file or return undef;
    print FO <FI>;
    close FO;
    return 1;
}

my %dir_check;
sub mkdir_check {
    my $dir = shift;
    return 1 if($dir_check{$dir});
    unless(-d $dir) {
        unless(mkdir $dir) {
            print STDERR "$!\n";return 0;
        }
        $dir_check{$dir}=1;
    }
    else {
        $dir_check{$dir}=1;
    }
    return 1;
}

my $idx = 1;
my $count = @files;
foreach my $file (@files) {
    print STDERR "[$idx/$count] Process $file ...\n";
    $idx++;
    if($file =~ /^http:\/\//i) {
        my $filename = $file;
        $filename =~ s/^.*\///;
        $filename ||= "index.html";
        mkdir_check("src") or die();
        $filename = "src/$filename";
        if(-f $filename) {
            goto download_end;
        }
        print STDERR "Downloading $file->$filename ...\n";
        if(download_url($file,$filename)) {
#            print STDERR "[OK]\n";
        }
        else {
            unlink $filename if(-f $filename);
#            print STDERR "[Failed]\n";
        }
        download_end:
        $file = $filename;
    }
   unless (-f $file) {
        print STDERR "File not exists : $file\t[Skipped]\n";
        next;
   }
    my @data;
    open FI,"<",$file;
    while(<FI>) {
        push @data,decode("gbk",$_);
    }
    close FI;
    my $tree=HTML::TreeBuilder->new_from_content(@data);
    my $title = get_title($tree);
    $title =~ s/^\s+//;
    $title =~ s/\s+$//;
    unless($title) {
        $title = $file;
        $title =~ s/.*\///;
        $title =~ s/\..*$//g;
    }
    $title =~ s/\[.*$//g;
    $title =~ s/5u.*//g;
    $title =~ s/[\/\\\!\*\+]//g;
    my $body;
    if($body_id) {
        ($body) = $tree->look_down("id",$body_id);
        ($body) = $tree->look_down("class",$body_id) unless($body);
     }
    $body = $tree unless($body);
    print STDERR "Found Content Title: $title ";
    my @images = $body->look_down(_tag=>"img",src=>qr/\.jpg$/i);
    if(@images) {
        print STDERR "Persist As Images\n";
        mkdir_check("img") or die();
        my $imgd = "img/$title";
        mkdir_check($imgd) or next;
        chdir $imgd;
        open FO,"|-","batchget" or die("$!\n");
        print FO $_->attr('src'),"\n" foreach(@images);
        close FO;
        chdir "../../";
    }
    else {
        mkdir_check("txt") or die();
        my $dst = "txt/$title.txt";
        print STDERR "Persist As Text -> $dst ...\t";
        if(-f $dst) {
            print STDERR "[Skipped(File exists)]\n";
            next;
        }
        open FO,">:utf8",$dst or die("$!\n");
        my $text = text_from_node($body); 
        print FO $title,"\n","\n";
        print FO @{$text},"\n" if($text);
        close FO;
        print STDERR "[OK]\n";
    }
    next unless($tree);
    $tree->delete();
}
