#!/usr/bin/perl -w
###APPNAME:     urlrule_database_add
###APPAUTHOR:   xiaoranzzz
###APPDATE:	Tue May 25 15:36:44 2010
###APPVER:	0.1
###APPDESC:     urlrule_database_add	
###APPUSAGE:	name id hosts...
###APPEXAMPLE:	urlrule_database_add
###APPOPTION:	
use strict;

#ENV variable MUST be defined somewhere,
#FOR perl to search modules from,
#OR nothing will work
use lib $ENV{XR_PERL_MODULE_DIR};

use MyPlace::Script::Usage qw/help_required help_even_empty/;
exit 0 if(help_required($0,@ARGV));
#exit 0 if(help_even_empty($0,@ARGV));
use MyPlace::URLRule::HostMap;
use Term::ANSIColor;
#binmode STDERR,'utf8';
#binmode STDOUT,'utf8';
#binmode STDIN,'utf8';

#my $TASK_DATABASE   = "test1.pl";
my $TASK_DATABASE   = "URLRule_Database.pl";
#die("No DATA_FILE(" . $TASK_DATABASE . ") found\n") unless(-r $TASK_DATABASE);
do $TASK_DATABASE;

my %HOSTS = %MyPlace::URLRule::HostMap::HOST_MAP;
my @HOSTS = keys %HOSTS;

our %NAMES;
my @NAMES = keys %NAMES;

sub print_id {
    my ($data,$tab)=@_;
    foreach (sort @{$data}) {
        print STDERR color('green'),"$tab\"$_\"",color('reset');
    }
}

sub print_name {
    my $data = shift;
    my $tab = shift;
    foreach (sort keys %{$data}) {
        print STDERR color('yellow'),"$tab$_ => ",color('reset');
        &print_id($data->{$_}," ");
        print STDERR "\n";
    }
}

sub print_map {
    my $data = shift;
    my $tab = shift;
    foreach (sort keys %{$data}) {
        print STDERR color('cyan'),$tab,$_,":",color('reset'),"\n";
        &print_name($data->{$_},"$tab\t");
    }
}

sub test_item {
    my ($item,$array)=@_;
    foreach(@{$array}) {
        return 1 if($item eq $_) ;
    }
    return undef;
}

sub save {
    my($ass,$filename,%data) = @_;
    open FO,'>',$filename or die("$!\n");
    print FO "$ass = (\n";
    foreach my $name (sort keys %data) {
        print FO "    \'$name\' => {\n";
            foreach my $id(sort keys %{$data{$name}}) {
        print FO "        \'$id\' => [\n";
            foreach my $host(sort @{$data{$name}->{$id}}) {
        print FO "            \'$host\',\n";
            }
        print FO "        ],\n";
            }
        print FO "    },\n";
    }
    print FO ");\n";
    close FO;
}



my ($name,$id,@hosts)=@ARGV;
if(!$name) {
    &print_map(\%NAMES,"");
#    foreach(@NAMES) {
#        print STDERR $_,":\n";
#        print_name($NAMES{$_},"\t");
#    }
    exit 0;
}
my $id_map = $NAMES{$name};
$id_map = {} unless($id_map);
my @old_ids = keys %{$id_map};
if(!$id) {
    print STDERR "$name:\n";
    print_name($id_map,"\t");
    exit 0;
}
my $old_host = $id_map->{$id} || [];
if(!@hosts) {
    print STDERR "$name:\n";
    print STDERR "\t$id => ";
    &print_id($old_host," ");
    print STDERR "\n";
    exit 0;
}

my @to_delete;
my @to_add;
foreach(@hosts) {
    if(/^-/) {
        $_ =~ s/^-//;
        push @to_delete,$_;
        print STDERR color('red'),"Mark \"$_\" for deleting\n",color('reset');
    }
    elsif(/^\\-/) {
        $_ =~ s/^\\//;
        push @to_add,$_;
    }
    else {
        push @to_add,$_;
    }
}

my $is_changed = 0;

print STDERR "Before edit:\n";
print STDERR "\t$name: \n";
&print_name($id_map,"\t\t");
print STDERR "======================================================\n";

my @new_hosts;
foreach my $host (@{$old_host}) {
    if(&test_item($host,\@to_delete)) {
        print STDERR color('red'),"Delete \"$host\" for $id\n",color('reset');
        $is_changed=1;
    }
    elsif(&test_item($host,\@new_hosts)) {
        print STDERR color('yellow'),"Ignore \"$host\", duplicated entry\n",color('reset');
    }
    else {
#        print STDERR color('green'), "Add \"$host\" to $id for $name\n",color('reset');
        push @new_hosts,$host;
    }
}
foreach my $host (@to_add) {
    if(&test_item($host,\@to_delete)) {
        print STDERR color('red'),"Ignore \"$host\", which marked for deleteing\n",color('reset');
    }
    elsif(&test_item($host,\@new_hosts)) {
        print STDERR color('yellow'),"Ignore \"$host\", duplicated entry\n",color('reset');
    }
    else {
        print STDERR color('green'), "Add \"$host\" to $id for $name\n",color('reset');
        $is_changed=1;
        push @new_hosts,$host;
    }
}

$id_map->{$id}=\@new_hosts;
$NAMES{$name} = $id_map;

print STDERR "After edit:\n";
print STDERR "\t$name:\n";
&print_name($id_map,"\t\t");
print STDERR "======================================================\n";

sub backup {
    my $filename=shift;
    my $newname=$filename;
    my $index = 1;
    while(-f $newname) {
        $newname = "$newname-$index";
        $index++;
    }
    system("cp","-av",$filename,$newname);
}
if($is_changed) {
    print STDERR color('yellow'),"Entries changed, write back to $TASK_DATABASE ...",color('reset');
    if(save("our %NAMES",$TASK_DATABASE,%NAMES)) {
        print STDERR color('green'),' [OK]',color('reset'),"\n";
        exit 0;
    }
    else {
        print STDERR color('red'),' [Failed]',color('reset'),"\n";
        exit 1;
    }
}
else {
    print STDERR color('green'),"Entries remained the same\n",color('reset');
}
exit 0;
