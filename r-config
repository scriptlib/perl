#!/usr/bin/perl -w
###APPNAME:     r-config
###APPAUTHOR:   xiaoranzzz
###APPDATE:	Tue May 25 22:26:26 2010
###APPVER:	0.1
###APPDESC:     a basic config system
###APPUSAGE:	(action) key
###APPEXAMPLE:	r-config read 'names,/jordan/,id,jordan,1'
###APPOPTION:	
use strict;

#ENV variable MUST be defined somewhere,
#FOR perl to search modules from,
#OR nothing will work
use lib $ENV{XR_PERL_MODULE_DIR};
use MyPlace::Config;
use Term::ANSIColor;


sub print1 {
    print STDERR color('green'),@_,color('reset');
}
sub print2 {
    print STDERR color('yellow'),@_,color('reset');
}
sub print3 {
    print STDERR color('red'),@_,color('reset');
}

sub print_path {
    my ($pre,$path,$suf,$sep) = @_;
    $sep = '->' unless($sep);
    if(@{$path}) {
        $pre = "" unless($pre);
        $suf = "" unless($suf);
        print1 $pre,join($sep,@{$path}),$suf;
    }
}

sub print_status {
    if(@_) {
        print1 "\t[OK]\n";
    }
    else {
        print3 "\t[Failed]\n";
    }
}

sub get_data {
    my $CONFIG=shift;
    my @r=$CONFIG->list(@_);
    return sort @r;
}

sub print_target {
    my $pre=shift;
    my $suf=shift;
    my $CONFIG=shift;
    my @r=$CONFIG->list(@_);
    $pre="" unless($pre);
    $suf="\n" unless(defined $suf);
    foreach(sort @r) {
        print1 $pre,$_,$suf;
    }
}

my @OPTIONS = qw/file|f:s help|h manual|man|m/;
my %OPTS;
if(@ARGV)
{
    require Getopt::Long;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
}
else {
	$OPTS{'help'} = 1;
}

if($OPTS{manual}) {
    require Pod::Usage;
    Pod::Usage::pod2usage(-exitval=>0,-verbose => 2);
    exit 0;
}
elsif($OPTS{help}) {
    require Pod::Usage;
    Pod::Usage::pod2usage(-exitval=>0,-verbose => 1);
    exit 0;
}

my $CONFIG;
my $database = $OPTS{file};
my $action = shift @ARGV;
my @queries = @ARGV;

$action = 'list' unless($action);
if((!@queries) and $action !~ m/^(?:list|add|plain|read|write|print|query|get|set)$/) {
    @queries = [$action];
    $action = 'query';
}



if($action eq 'add' and !@queries) {
    print3 "Invalid usage\n";
    print2 "Usage:\n\tr-config add keys...|values...\n";
    exit 1;
}
$CONFIG = MyPlace::Config->new();
$CONFIG->read_plainfile($database);


if(($action eq 'list') or ($action eq 'query')) {
    @queries = ['/.+/'] unless(@queries);
}


if($action eq 'add') {
	    print1 "add ", join(' -> ',@queries);
	    print_status($CONFIG->add(@queries));
}
elsif($action eq 'plain') {
	my $output = shift(@queries) || '-';
    $CONFIG->write_plainfile($output,1);
    exit 0;
}
elsif($action =~ m/^(?:add|write|delete|set)$/) {
	my $userdata = pop @queries;
	if(!@queries) {
		@queries = [$userdata];
		$userdata = undef;
	}
	my @target = $CONFIG->query(\@queries,1);
	use Data::Dumper;print STDERR Data::Dumper->Dump([\@queries,\@target],['*queries','*target']),"\n";
	if($action eq 'write') {
		die("Usage: $0 write KEYS value\n") unless($userdata);
        print_target("write \"","\"  = \"$userdata\"\n",$CONFIG,@target);
        print_status($CONFIG->write($userdata,@target));
	}
	elsif($action eq 'delete') {
	        print_target("delete \"",($userdata ? "->$userdata\"\n" : "\"\n"),$CONFIG,@target);
	        print_status($CONFIG->delete($userdata,@target));
	}
	elsif($action eq 'set') {
		die("Usage: $0 set KEYS value\n") unless($userdata);
	    print_target("set \"","\"  = \"$userdata\"\n",$CONFIG,@target);
	    print_status($CONFIG->set($userdata,@target));
	}
}
else {
    my @target = $CONFIG->query(\@queries);
    if(!@target) {
        print3 "query match nothing\n";
        exit 2;
    }
    $!=undef;
    if($action eq 'list') {
        print_target("","\n",$CONFIG,@target);
        exit 0;
    }
    elsif($action eq 'print') {
        print $_,"\n" foreach(&get_data($CONFIG,@target));
        exit 0;
    }
    elsif($action eq 'read') {
        my @r=$CONFIG->read(@target);
        foreach(@r) {
            my($path,$values) = @{$_};
            print_path("",$path," = ");
            print2 join(", ",@{$values}),"\n";
        }
    }
    elsif($action eq 'query') {
        my @records = $CONFIG->get_records(@target);
        foreach(@records) {
            print_path('',$_,"\n","->");
        }
    }
	elsif($action eq 'get') {
		my @r = $CONFIG->get(@target);
		foreach(@r) {
			next unless($_);
			my ($path,@value) = @{$_};
			foreach(@value) {
				print STDOUT $_,"\n" if($_);
			}
		}
	}
    if($!) {
        print3 "$!\n";
        exit 1;
    }
}
if($CONFIG->{dirty}) {
    print2 "Saving configs to $database";
    print_status($CONFIG->write_plainfile($database));
}
exit 0;

__END__

=pod

=head1 NAME
	
r-config - MyPlace::Config frontend

=head1 SYNOPSIS

r-config [options] action

=head1 OPTIONS

=over

=item B<--file>,B<-f>

Specify configuration file

=item B<--help>,B<-h>

Display help texts

=item B<--manual>,B<--man>,B<-m>

Display manual

=back

=head1 ACTIONS

Supported actions

=over

=item B<read>

read [KEY]

=item B<write>

write KEY VALUE

=item B<add>

add KEY [VALUE]

=item B<delete>

delete KEY [VALUE]

=item B<list>

list [KEY]

=item B<print>

print [KEY]

=item B<query>

query [KEY]

=back

=head1 KEY

=item B<single key>

	string|regex

=item B<Multiply key>
	
	single key[,single key][,single key]...

=head1 CONFIGURATION FILE FORMAT

use MyPlace::Config;

=head1  DESCRIPTION

MyPlace configuration manager

=head1  CHANGELOG

	2010-05-25	xiaoranzzz	<xiaoranzzz@myplace.hell>

		* initial code
	
	2011-12-14  xiaoranzzz  <xiaoranzzz@myplace.hell>

		* Add options parsing, and manual.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@myplace.hell>

=cut

#       vim:filetype=perl


