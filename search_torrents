#!/usr/bin/perl -w
# $Id$
package MyPlace::Script::search_torrents;
use strict;
use MyPlace::Script::Message;
use MyPlace::Program;
use MyPlace::URLRule::OO;
our %EXIT_CODE = %MyPlace::Program::EXIT_CODE;

our $VERSION = 'v0.1';
my @OPTIONS = qw/
	help|h|? 
	manual|man
	download|d
	no-download|nd
	engine|e:s
	dest|directory:s
	worker
	group|g=s
	all|a
/;
my %OPTS;
if(@ARGV)
{
    require Getopt::Long;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
}
if($OPTS{'help'} or $OPTS{'manual'}) {
	require Pod::Usage;
	my $v = $OPTS{'help'} ? 1 : 2;
	Pod::Usage::pod2usage(-exitval=>$v,-verbose=>$v);
    exit $v;
}


my %ENGINES = (
	#Mirror btkitty.org
	'btkitty'=>[
		'http://btkitty.pet/?###QUERY###',
		3,
	],
	'btdigg.org'=>[
		'https://btdigg.org/?###QUERY###',
		2,
	],
	'#sobt5.com'=>[
		'http://www.sobt5.com/q/###QUERY###',
		1,
	],
	'torrentkitty'=>[
		#'http://www.torrentkitty.org/search/###QUERY###/',
		'https://www.torrentkitty.tv/search/###QUERY###/',
		2,
	],
	#'torrentkittyzw.com'=>[
	#	'http://www.torrentkittyzw.com/###QUERY###',
	#	3,
	#],
	'#btdigg.ws'=>[
		'https://btdigg.ws/?###QUERY###',
		3,
	],
#	'ganluzhe.com'=>[
#		'http://www.ganluzhe.com/###QUERY###',
#		2,
#	],
	'btbibi.com'=>[
		'http://btbibi.com/###QUERY###',
		3,
	],
	'torrentproject'=>[
		'https://torrentproject.se/?safe=off&t=###QUERY###',
		2,
	],
#	'mp4ba.com'=>[
#		'http://www.mp4ba.com/search.php?keyword=###QUERY###',
#		2,
#	],
	'kat.cr'=>[
		#'https://kat.cr/?###QUERY###',
		'http://kickasstorrentsan.com/?###QUERY###',
		2,
	],
	'bitsnoop'=>[
		'https://bitsnoop.com/search/all/###QUERY###+safe:no/c/d/1',
		2,
	],
);

my %ENGINES2  = (
	'breadsearch.com'=>[
		'http://www.breadsearch.com/search/###QUERY###',
		1,
	],
#	'storetorrent.org'=>[
#		'http://www.storetorrent.org/s/###QUERY###',
#		2,
#	],
);

my %GROUPS = (
	'NSFW'=>[qw/
		torrentproject
		torrentkitty
		sobt5.com
		btkitty
		btdigg.ws
		btbibi.com
		torrentkittyzw.com
		breadsearch.com
		ganluzhe.com
		kat.cr
		/
	],
	'SAFE'=>[qw/
		mp4ba.com
	/],
);



my %engine;
my @DATA;

if($OPTS{engine}) {
	foreach(keys %ENGINES) {
		if(m/$OPTS{engine}/) {
			$engine{$_} = $ENGINES{$_};
		}
	}
}
elsif($OPTS{group}) {
	if(defined $GROUPS{$OPTS{group}}) {
		foreach(@{$GROUPS{$OPTS{group}}}) {
			$engine{$_} = $ENGINES{$_} if($ENGINES{$_});
		}
	}
	#die(join("\n",(keys %engine)),"\n");
}
elsif($OPTS{all}) {
	%engine = (%ENGINES,%ENGINES2);
}
else {
	%engine = %ENGINES;
}

if(!%engine) {
	app_error "No search engine specified\n";
	exit 1;
}

if($OPTS{worker}) {
	require MyPlace::Tasks::Worker::SearchTorrents;
	my $worker = new MyPlace::Tasks::Worker::SearchTorrents::Program;
	my @args;
	if($OPTS{'no-download'}) {
		push @args,'--no-download';
	}
	elsif($OPTS{download}) {
	}
	push @args,'--engine',$OPTS{engine} if($OPTS{engine});
	push @args,'--dest',$OPTS{dest} if($OPTS{dest});
	exit $worker->execute(@args,@ARGV);
}

if(!@ARGV) {
	foreach my $fk(qw/keywords.lst keywords.txt search.ini/) {
		next unless(-f $fk);
		app_message2 "Read queires from <$fk>\n";
		open FI,'<',$fk or next;
		foreach(<FI>) {
			s/[\r\n]+$//;
			next unless($_);
			push @ARGV,$_;
			app_message2 "  : $_\n" 
		}
		close FI;
	}
}

if(!@ARGV) {
	app_warning "Usage:$0 [-d] <Queries...>\n";
	exit 1;
}

if($OPTS{dest}) {
	if(! -d $OPTS{dest}) {
		mkdir $OPTS{dest} or die("Error creating directory $OPTS{dest}: $!\n");
	}
	chdir $OPTS{dest} or die("Error changing to directory $OPTS{dest}: $!\n");
	app_warning "Enter $OPTS{dest} ...\n";
}

sub do_action {
	my $OPTS = shift;
	my $action = shift;
	my @request = @_;
	my $idx = 0;
	my $URLRULE = new MyPlace::URLRule::OO(
			'action'=>$action,
			'thread'=>$OPTS->{thread},
			'createdir'=>$OPTS->{createdir},
			'options'=>{
				fullname=>$OPTS->{fullname},
			},
			'include'=>$OPTS->{include},
			'exclude'=>$OPTS->{exclude},
	);
	my $count = @request;
	foreach(@request) {
		$idx++;
		$_->{progress} = "[$idx/$count]";
		$URLRULE->autoApply($_);
		$URLRULE->reset();
	}
	if($URLRULE->{DATAS_COUNT}) {
		return $EXIT_CODE{OK};
	}
	else {
		return $EXIT_CODE{DO_NOTHING};
	}
}

my @request;
foreach my $QUERY(@ARGV) {
	my $k = $QUERY;
	$k =~ s/\s+/+/g;
	foreach(keys %engine) {
		next if(m/^#/);
		app_message2 "Search \<$QUERY\> using engine \[$_\]\n";
		my $url = $engine{$_}[0];
		my $level = $engine{$_}[1];
		$url =~ s/###QUERY###/$k/g;
		push @request,{
			count=>1,
			url=>$url,
			level=>$level,
			prompt=>"$_:$QUERY",
		};
	}
}

my $exit = 0;
if(@request) {
	$exit = do_action(\%OPTS,'DATABASE',@request);
}

if($OPTS{download}) {
	$exit = system("mdown","--input","urls.lst","--title",join(" ",@ARGV));
}
exit $exit;

__END__

=pod

=head1  NAME

search_torrents - PERL script

=head1  SYNOPSIS

search_torrents [options] ...

=head1  OPTIONS

=over 12

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

=head1  DESCRIPTION

___DESC___

=head1  CHANGELOG

    2014-10-15 03:14  xiaoranzzz  <xiaoranzzz@MyPlace>
        
        * file created.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@MyPlace>

=cut

#       vim:filetype=perl
