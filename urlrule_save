#!/usr/bin/perl -w
# $Id$
use strict;
our $VERSION = 'v2.0';
my @OPTIONS = qw/
	help|h|? 
	manual|man
	no-history|nh
	test|t=i
/;
my %OPTS;
if(@ARGV)
{
    require Getopt::Long;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
}
sub help {
	require Pod::Usage;
	my $v = $OPTS{'help'} ? 1 : 2;
	Pod::Usage::pod2usage(-exitval=>$v,-verbose=>$v);
	return $v;
}
if($OPTS{'help'} or $OPTS{'manual'}) {
	exit help();
}

my $urlrule_action = `which urlrule_action`;
chomp($urlrule_action);
die("Error: Program \"urlrule_action\" not found\n") unless(-f $urlrule_action);
if(@ARGV) {
	my $saveurl = "DOWNLOADER";
	my $url = shift;
	die("Usage $0 <URL> [LEVEL]\n") unless($url);
	my $level = shift;
	$level = 0 unless($level);
	@ARGV=($url,$level,$saveurl);
}
if($OPTS{"history"}) {
	push @ARGV,"--history";
}
push @ARGV,"--test",$OPTS{test} if($OPTS{test});
eval `cat "$urlrule_action"`;
if($@) {
	print STDERR "$@\n";
	exit 1;
}
else {
	exit 0;
}
__END__

=pod

=head1  NAME

urlrule_save - Apply rules for urls, save results to disk

=head1  SYNOPSIS

urlrule_save [options] [URL] [LEVEL]

=head1  OPTIONS

=over 12

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

=head1  DESCRIPTION

___DESC___

=head1  CHANGELOG

    2013-10-09 13:48  xiaoranzzz  <xiaoranzzz@Mainstream>
        
        * file created.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@Mainstream>

=cut

#       vim:filetype=perl
