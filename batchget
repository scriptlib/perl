#!/usr/bin/perl -w
###APPNAME:     batchget
###APPAUTHOR:   xiaoranzzz
###APPDATE:	Fri Sep 28 12:31:18 2007
###APPVER:	0.2
###APPDESC:     Download URLS,using simdo	
###APPUSAGE:	[OPTIONS...] [Task Name]
###APPEXAMPLE:	cat url.lst | batchget
###APPOPTION:	-m:Max number of simultanous tasks|-n:Task name|-a:Auto rename|-d:Create directories|-e:extension name for autorename|-w:Working directory|-r:Refer URL|-h:Display this text|-b:cookie|-L:Logging programe|-f:Full name|-i:Auto rename by index|-M:Max time for a download|-U use urls history database 

use strict;
use lib $ENV{XR_PERL_MODULE_DIR};
use MyPlace::ParallelRun;
use Getopt::Std;
use URI::Escape;
use MyPlace::Script::Message;

#BEGIN {srand(time());}

my %opts;
getopts('M:hm:n:fade:w:r:L:b:iU',\%opts);
exit(system("formathelp",$0,"-n")) if($opts{"h"});

my $def_mul=3;
my $createdir = $opts{"d"} ? $opts{"d"} : 0;
my $maxtime = $opts{"M"} ? $opts{"M"} : undef;
my $muldown   = $opts{"m"} ? $opts{"m"} : $def_mul;
my $taskname  = $opts{"n"} ? $opts{"n"} : "";
my $autoname  = $opts{"a"} ? $opts{"a"} : 0;
my $extname   = $opts{"e"} ? $opts{"e"} : "";
my $workdir   = $opts{"w"} ? $opts{"w"} : "";
my $refer     = $opts{"r"} ? $opts{"r"} : "";
my $logger    = $opts{"L"} ? $opts{"L"} : "";
my $cookie    = $opts{"b"} ? $opts{"b"} : "";
my $number    = $opts{"i"} ? $opts{"i"} : "";
my $fullname  = $opts{"f"} ? 1 : 0;
my $urlhist   = $opts{'U'} ? 1 : 0;
my $URL_DATABASE_FILE = 'URLS.txt';

$autoname="true" if($number);
unless($taskname) {
    $taskname = shift(@ARGV)  if(@ARGV);
}
$taskname = "" unless($taskname);
$muldown = 1 if( $muldown<1);

if($workdir) {
    mkdir $workdir unless(-d $workdir);
    $workdir .= "/" unless($workdir =~ /\/$/);
#    chdir($workdir);
}

my %URL_DATABASE;

sub load_database {
    open FI,"<",$URL_DATABASE_FILE or return;
    while(<FI>) {
        chomp;
        $URL_DATABASE{$_}=1;
    }
    close FI;
}
sub check_database {
    my $url = shift;
    if($URL_DATABASE{$url}) {
        app_warning("URL IN DATABASE,ignored.[$url]\n");
        return 1;
    }
    else {
        $URL_DATABASE{$url}=1;
        return undef;
    }
}
sub save_database {
    open FO,">",$URL_DATABASE_FILE or return;
    foreach (keys %URL_DATABASE) {
        print FO $_,"\n";
    }
    close FO;
}
sub Uniqname($) {
    my $ext =shift;
    my $max = 10000000000;
    my $result;
    do { 
        my $n1 = int (rand($max));
        my $n2 = log($max / $n1)/log(10);
        $result=$n1 . "0"x$n2 . $ext;
    } until (! -f $result);
    return $result;
}
sub GetFilename_Fullname {
    my $result=shift;
    $result =~ s/^.*:\/\///;
    $result =~ s/[\/\?\:\\\*\&]/_/g;
    $result =~ s/&//g;
    return $result;
}

sub GetFilename_Auto {
    my $URL=shift;
    my $num=shift;
    my $result;
    #my $ext=$extname;
    #($ext=$URL) =~ s/^.*\.([^\.]*)$/.$1/ unless($ext);
    #$result=$num ? "$num$ext" : Uniqname($ext);
    $result = $URL;
    $result =~ s/^.*:\/\///;
    $result =~ s/[\/\?\:\\\*\&]/_/g;
    $result =~ s/&//g;
    if(length($result)>=128) {
        $result = substr($result,0,127);
    }
    $result = "$num.$result" if(defined $num);
    if($createdir) {
        my $dirname=$URL;
        $dirname =~ s/^.*:\/*[^\/]*\///;
        $dirname =~ s/\/[^\/]*//;
        $dirname .= "/" if($dirname);
        $result = $dirname . $result;    
    }
    return $result;
}
sub GetFilename_NoAuto {
    my $result=shift;
    if($createdir) {
        $result =~ s/^.*:\/*[^\/]*\///;
    }
    else {
        $result =~ s/^.*\///;
    }
    return $result;
}

sub pushArgPair(\@$$) {
    my $DARG=shift;
    my $key=shift;
    my $value=shift;
    if($value) {
        push @{$DARG},$key;
        push @{$DARG},$value;
    }
}
sub inqueue {
    my ($URL,$index,$count,$prefix)=@_;
    my $curname= "[$prefix$index/$count]";
    my $stridx = "0" x (length($count)-length($index)+1) . $index if($number);
    my $filename= $fullname ? GetFilename_Fullname(uri_unescape($URL)) : ($autoname ? GetFilename_Auto(uri_unescape($URL),$stridx) : GetFilename_NoAuto($URL));
    my $thisrefer= $refer ? $refer : $URL;
    if($logger) {system($logger,$filename,$URL);}
    my @DARG;
    pushArgPair(@DARG,"-u",$URL);
    pushArgPair(@DARG,"-s",$workdir . $filename);
    pushArgPair(@DARG,"-n",$curname);
    pushArgPair(@DARG,"-r",$thisrefer);
    pushArgPair(@DARG,"-b",$cookie);
    pushArgPair(@DARG,"-m",$maxtime);
    push(@DARG,"-d");
    para_queue "download",@DARG;
}

if($cookie) {
    system("mkcookie '$cookie' >download.cookie");
    $cookie="download.cookie";
}

my $prefix = $taskname ? $taskname . " " : "";
my @URLS;
my $index=0;
my $count=0;

if($urlhist) {
    load_database();
}

para_init $muldown;
while(<STDIN>) {
    chomp;
    next if($urlhist and check_database($_));
    push @URLS,$_;
    $count++;
    if(&para_isfree()) {
        my $URL = shift @URLS;
        $index++;
        &inqueue($URL,$index,$count,$prefix);
    }
#    print STDERR ("\r$count URLS enqueued...                 ");
}
foreach my $URL (@URLS) {
    $index++;
    &inqueue($URL,$index,$count,$prefix);
    sleep 1;
}
para_cleanup();
save_database() if($urlhist);

#print STDERR ("\n");
#exit 0 unless($count);



