#!/usr/bin/perl -w
###APPNAME:     urlrule_action
###APPAUTHOR:   duel
###APPDATE:	Mon Mar 24 06:25:31 2008
###APPVER:	0.1
###APPDESC:     apply rule for URL,and perform action	
###APPUSAGE:	urlrule_action URL [0-5] [action args...]
###APPEXAMPLE:	urlrule_action http://www.sina.com.cn 0 cat
use strict;
use utf8;
use Data::Dumper;

use lib $ENV{XR_PERL_MODULE_DIR};
use MyPlace::Script::Usage qw/help_required help_even_empty/;
exit 0 if(help_required($0,@ARGV));

use URI;
use MyPlace::Script::Message;
use MyPlace::URLRule;
use MyPlace::ReEnterable;
use Cwd qw/getcwd/;


my $RESUME_FILE = '.urlrule_resume';
my $phnd = MyPlace::ReEnterable->new('main');



no warnings;

my %cached_rule;
my @prompt;
sub code_message {
    my $code = shift;
    print STDERR @_;
    return $code;
}

sub callback_process_data {
    my($from,$rule,$result) = @_;
    app_message("callback:$from\n");
    &process_data($rule,$result);
}
sub callback_process_passdown {
    my($from,$rule,$result) = @_;
    app_message("callback:$from\n");
    &process_passdown($rule,$result);
}

sub process_data {
    my $rule_ref = shift;
    return unless(ref $rule_ref);
    return unless(%{$rule_ref});
    my $result_ref = shift;
    return unless(ref $result_ref);
    return unless(%{$result_ref});

    my %rule = %{$rule_ref};
    my %result = %{$result_ref};

    my $url=$rule{"url"};
    my $level = $rule{"level"};
    my $action = $rule{"action"};
    my @args = $rule{"args"} ? @{$rule{"args"}} : ();
    my $msghd = "";
    my $count = @{$result{data}};
    app_message($msghd , "Level $level>>","Get $count Lines,performing action $action..\n");
    my ($status,@message) = do_action($result_ref,$action,@args);
    if($status) {
        app_message($msghd,"Level $level>>",@message,"\n");
        return 1;
    }
    else {
        app_warn($msghd,"Level $level>>",@message,"\n");
        return undef;
    }
}


sub process_passdown {
    my $rule_ref = shift;
    return unless(ref $rule_ref);
    return unless(%{$rule_ref});
    my $result_ref = shift;
    return unless(ref $result_ref);
    return unless(%{$result_ref});
    my $msghd="";
    my ($level,$count,@passdown) = make_passdown($rule_ref,$result_ref);
    my $tlevel = $rule_ref->{level};
    if($count) {
        app_message($msghd,"Level $tlevel>>","Get $count rules to pass down to level $tlevel.\n");
    }
    else {
        return undef;
#        app_message($msghd,"Level $level>>","Get nothing to pass.\n");
        return 1;
    }
    for(my $i=0;$i<$count;$i++) {
        my ($dir,@args) = @{$passdown[$i]};
        my $cwd = getcwd();
        if($dir) {
            mkdir $dir unless(-d $dir);
            if(!chdir $dir) {
                app_error($msghd,"Level $tlevel>>","$!\n");
                next;
            }
        }
        app_message($msghd , "Level $tlevel>>","[" . ($i + 1) . "/$count] $args[0]\n");
        $phnd->push(getcwd(),'load_rule',@args);
        chdir $cwd;
    }
    return 1;
}

sub execute_rule {
    my %rule = @_;
    my $url = $rule{url};
    my $source = $rule{"source"};
    my @args = $rule{"args"} ? @{$rule{"args"}} : ();
    unless(-f $source) {
        return undef,"File not found: $source";
    }
    $! = undef;
    do $source; 
    return undef,$! if($!);
    my %result = &apply_rule($url,\%rule);
    return 1,\%result;
}
sub start_rule {

    my %rule = %{parse_rule(@_)};
    
    my $url=$rule{"url"};
    my $domain = $rule{"domain"};
    my $source = $rule{"source"};
    my $level = $rule{"level"};
    my $action = $rule{"action"};
    my @args = $rule{"args"} ? @{$rule{"args"}} : ();
    my $msghd = "";
    
    app_message(@prompt,$msghd,"For \"$url\"\n");
    app_message(@prompt,$msghd , "Level $level>>","Found rule: \"$source\"\n");
    app_message(@prompt,$msghd , "Level $level>>","Applying it ...\n");
    my ($status,$result)= execute_rule(%rule);
    if($status) {
        process_data(\%rule,$result);
        process_passdown(\%rule,$result);
        return 1;
    }
    else {
        app_error(@prompt,$msghd, "Error:",$result,"\n");
        return undef;
    }
}

sub load_rule {
    my $cwd = getcwd();
    start_rule(@_);
    chdir $cwd if($cwd);
}

$SIG{INT} = \&sig_killed;
my $cwd = getcwd();

sub sig_killed {
    app_message("saving remained tasks...\n");
    if($phnd->{lastStack}) {
        $phnd->unshift(@{$phnd->{lastStack}});
    }
    chdir($cwd) if($cwd);
    $phnd->saveToFile($RESUME_FILE);
    app_message($phnd->length," tasks saved to $RESUME_FILE\n");
    exit 1;
}



if(@ARGV) {
    $phnd->push($cwd,'load_rule',@ARGV);
}
else {
    $phnd->loadFromFile($RESUME_FILE);
}
while(my $tasks = $phnd->length) {
    app_error("[$tasks] tasks remained\n");
    my @this = $phnd->peek();
    if(@this) {
        my $wdir = shift @this;
        my $cmd = shift @this;
#        app_warning("rule       -  @this\n");
#        app_warning("directory  -  $wdir\n");
    }
    $phnd->run();
}
app_message "All tasks completed.\n";
unlink $RESUME_FILE if(-f $RESUME_FILE);
exit 0;
#load_rule(@ARGV);
