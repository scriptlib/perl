#!/usr/bin/perl -w
# $Id$
use strict;
require v5.8.0;
our $VERSION = 'v0.2';
BEGIN
{
    our $PROGRAM_DIR = $ENV{XR_PERL_SOURCE_DIR};
    unless($PROGRAM_DIR) {
        $PROGRAM_DIR = $0;
        $PROGRAM_DIR =~ s/[^\/\\]+$//;
        $PROGRAM_DIR =~ s/(.)\/+$/$1/;
        $PROGRAM_DIR = "." unless($PROGRAM_DIR);
    }
    unshift @INC, 
        map "$PROGRAM_DIR/$_",qw{modules lib ../modules ..lib};
}
my %OPTS;
my @OPTIONS = qw/stdout|o stdin|i simple|s help|h|? version|ver edit-me manual|man/;
if(@ARGV)
{
    require Getopt::Long;
    require MyPlace::Usage;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
    MyPlace::Usage::Process(\%OPTS,$VERSION);
}
else
{
    require MyPlace::Usage;
    MyPlace::Usage::PrintHelp();
    exit 0;
}


my $module_name=shift;
if(!$module_name) {
    require MyPlace::Usage;
    MyPlace::Usage::PrintHelp();
    exit 0;
}

our $PROGRAM_DIR;
my $OUTPUT_DIR=$PROGRAM_DIR . "/modules";

#Output to STDOUT
if($OPTS{stdout}) {
    open FO,">&STDOUT" or die("fatal: can't not duplicate STDOUT\n");
}
else {
    my $pn = $module_name;
    $pn =~ s/::/\//g;
    die "Can't not locate script directory.\n" if(!$OUTPUT_DIR);
    die "Direcoty not exists:\"$OUTPUT_DIR\"\n" if (! -d $OUTPUT_DIR);
    my $fn="$OUTPUT_DIR/$pn.pm";
    my $dn=$fn;
    $dn =~ s/\/[^\/]+$/\//;
    if(!-d $dn) {
        system("mkdir","-p",$dn) and die("$!\n");
    }
    exit system("r-vim",$fn) if(-f $fn);
    open FO,"|-","r-vim - -c \"file \"$fn\"\"" or die("$!\n");
}



my @TEXT;

if($OPTS{simple}) {
    @TEXT = ("#!/usr/bin/perl -w\n","use strict;\n");
}
elsif($OPTS{read}) {
    @TEXT = <STDIN>;
}
elsif(open FI,"<","$OUTPUT_DIR/perl_module.template") {
    @TEXT=<FI>;
    close FI;
}
else {
@TEXT=<<'EOF'
#!/usr/bin/perl -w
use strict;
use warnings;
BEGIN {
    require Exporter;
    our ($VERSION,@ISA,@EXPORT,@EXPORT_OK,%EXPORT_TAGS);
    $VERSION        = 1.00;
    @ISA            = qw(Exporter);
    @EXPORT         = qw();
    @EXPORT_OK      = qw();
}
1;
EOF
;
}
use Env qw/USER HOSTNAME/;
use POSIX qw/strftime/;
my $DATE= strftime("%Y-%m-%d %H:%M",localtime());
$USER="xiaoranzzz" unless($USER);
my $EMAIL="$USER\@" . (defined $HOSTNAME ? $HOSTNAME : "myplace.hell");
foreach(@TEXT) {
    s/___NAME___/$module_name/g;
    s/___AUTHOR___/$USER/g;
    s/___EMAIL___/$EMAIL/g;
    s/___DATE___/$DATE/g;
    print FO $_;
}
close FO;

__END__

=pod

=head1  NAME

pmnew - create new perl module 

=head1  SYNOPSIS

pmnew [options] <module name>

=head1  OPTIONS

=over 12

=item B<-i>,B<--stdin>

Read template from STDIN

=item B<-o>,B<--stdout>

Write to STDOUT

=item B<-s>,B<--simple>

Disable using template.

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

=head1  FILES

=item B<$XR_PERL_MODULE_DIR>

    Output directory environment variable

=item $XR_PERL_MODULE_DIR\B<perl_module.template>

    Module template file

=back

=head1  DESCRIPTION

Create perl module with custumized template. By default, created module
will saved in directory "$XR_PERL_MODULE_DIR".

=head1  CHANGELOG
    
    2008-05-06 15:07 xiaoranzzz <xiaoranzzz@myplace.hell>
        
        * initial version 0.1

    2010-11-09 20:56 xiaoranzzz  <xiaoranzzz@myplace.hell>
        
        * rewrote, version 0.2

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@myplace.hell>

=cut



