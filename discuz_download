#!/usr/bin/perl -w
# $Id $
use strict;
require v5.10.0;
our $VERSION = 'v0.2';

BEGIN
{
    my $PROGRAM_DIR = $0;
    $PROGRAM_DIR =~ s/[^\/\\]+$//;
    $PROGRAM_DIR = "./" unless($PROGRAM_DIR);
    unshift @INC, 
        map "$PROGRAM_DIR$_",qw{modules lib ../modules ..lib};
}
use MyPlace::Discuz;
use MyPlace::ReEnterable;
use MyPlace::Script::Message;
use Cwd qw/getcwd/;
use constant {
    RESUME_DATA_FILE=>".discuz_download.resume",
    THREAD_DBASE_FILE=>".threads",
};
use utf8;
binmode STDERR,"utf8";
my %THREAD_DBASE;
my $g_START_DIRECTORY;
my $g_HANDLER;
my $g_TYPE;
my $g_USER;
my $g_PASS;
my $g_AUTO_RENAME;

sub build_dir {
    my $f =shift;
    my $s = shift;
    #$s =~ s/^(\[[^\[\]]+\]\s*)+//g;
    $s =~ s/\s*[\/\:\*\<\>\?\!\\\|]\s*/-/g;
    $s =~ s/【[^【】]+\s*阅\s*】//;
    $s =~ s/【\s*作者(?:：|:)不(?:祥|详)\s*】\s*//;
    $s =~ s/^\s+//;
    $s =~ s/\s+$//;
    return "$f/$s";
}
sub loadpage {
    my ($url,$g_USER,$g_PASS,$prompt) = @_;
    app_message "loading $url...";
    sleep 1;
    my $page = MyPlace::Discuz->new(user=>$g_USER,pass=>$g_PASS);
    if($page->init_with_url($url)) {
        app_message "--no-prefix","\t[OK]\n";
        return $page;
    }
    else {
        app_warning "--no-prefix","\t[Failed]\n";
        return undef;
    }
}


sub save_post {
    my ($dir,$filename,$url,$prompt,$subpage,$type) = @_;
#    $prompt = $prompt ? "[$prompt]" : "";
#    app_message $prompt,"\n";
    if(not &write_thread_dbase($url,1)) 
    {
        app_warning "$url [Ignored, in THREAD_DBASE!]\n";
        return undef;
    }
    $type = $g_TYPE unless($type);
    $subpage = loadpage($url,$g_USER,$g_PASS) unless($subpage);
    unless($subpage and $subpage->{post}) {
        app_warning "Empty post...\n";
        &write_thread_dbase($url,0);
        return undef;
    }
    mkdir $dir unless(-d $dir);
    if($type eq 'all' or $type =~ /\|all\|/) {
        save_images($dir,$filename,$subpage);
        save_text($dir,$filename,$subpage);
        save_attachment($dir,$filename,$url,$subpage);
    }
    else
    {
        if($type eq 'image' or $type =~ /\|image\|/) {
            save_images($dir,$filename,$subpage);
        }
        if($type eq 'attachment' or $type =~ /\|attachment\|/) {
            save_attachment($dir,$filename,$url,$subpage);
        }
        if($type eq 'text' or $type =~ /\|text\|/)
        {
            save_text($dir,$filename,$subpage);
        }
    }
    &write_thread_dbase($url,0);
}



sub save_images {
    my $dir = shift;
    my $filename = shift;
    my $subpage = shift;
#    my $prompt = shift;
    my @images = $subpage->get_post_images($subpage->{post});
    app_message("Saving images ...");
    unless(@images) {
        app_warning "--no-prefix","\t[No images found!]\n";
        return undef;
    }
    my $dst = build_dir($dir,$filename);
    mkdir $dst unless(-d $dst);
    foreach my $idx (0 .. $#images) {  
        app_message "\n[" . ($idx+1)  . "/$#images]" if(@images > 1);
        app_message "--no-prefix","$images[$idx]\n-->$dst/$idx.jpg ...\n";
        if(-f "$dst/$idx.jpg") {
            app_message "\t[Skipped] File exists\n";
            next;
        }
        $subpage->download($images[$idx],"$dst/$idx.jpg");
    }
}

sub get_filename {
    my ($fst,$sec)=@_;
    $sec ="" unless($sec);
    my $idx=0;
    my $basename = $fst;
    while (-e "$basename$sec") {
        $idx++;
        $basename="$fst\_$idx";
    }
    return "$basename$sec";
}

sub save_text {
    my $dir = shift;
    my $filename = shift;
    my $subpage = shift;
#    my $prompt = shift;
    if($g_AUTO_RENAME) {
        $filename = &autorename($filename);
    }
    my $dst = build_dir($dir,$filename);
    $dst = &get_filename($dst,".txt");
    app_message "Saving Text ==>$dst ...";
    mkdir $dir unless(-d $dir);
    return (app_error "--no-prefix","\t[Failed: $dir not exists!]\n") unless(-d $dir);
    if(-f $dst) { 
        app_warning "--no-prefix","\t[Skipped: File exists!]\n";
        return undef;
    }
    my $text;
    if($subpage) {
        $text = $subpage->get_post_text($subpage->{post});
    }
    else {
        $text = shift;
    }
    unless($text) {
        app_message "--no-prefix","\t[No text to save!]\n";
        return undef;
    }
    open FO,">:utf8",$dst or return (app_message "--no-prefix","\t[Failed:]$!\n");
    print FO @{$text};
    close FO;
    app_message "--no-prefix","\t[Done]\n";
    return 1;
}

sub save_attachment {
    my($dir,$filename,$url,$subpage) = @_;
    app_message "Saving Attachments ...";
    if(!($subpage->{attachment})) {
        app_message "--no-prefix","\t[No attachments found!]\n";
        return undef;
    }
    my $dst = build_dir($dir,$filename); #$filename);
    mkdir $dst unless(-d $dst);
    print STDERR "\n";
    foreach(@{$subpage->{attachment}}) 
    {
        my $attachment_filename = build_dir($dst,$_->[0] . '_' . $_->[1]);
        app_message "Downloading $attachment_filename ...";
        if( -f $attachment_filename) 
        {
            app_warning "--no-prefix","\t[Ignored: File exists!]\n";
            next;
        }
        print STDERR "\n";
        my $attachment_url =  MyPlace::Discuz->build_url($_->[0],$url);
        MyPlace::Discuz->download($attachment_url,$attachment_filename . ".downloading");
        if(-f $attachment_filename . ".downloading")
        {
            rename $attachment_filename . ".downloading",$attachment_filename;
        }
    }
}

sub min_max {
    return (shift() + 1) . "/" .  (shift() + 1)
}

sub process_url {
    my $dir = shift;
    my $url = shift;
    my $no_subpage = shift;
    my $prompt = shift;
    my $type = shift;
    my $page = loadpage($url,$g_USER,$g_PASS);
    #,$prompt);
    mkdir $dir unless(-d $dir);
    return unless($page);
    if($page->{post}) {
            save_post($dir,$page->{title} ,$url,$prompt,$page,$type);
            $page->delete();
        return 1;
    }
    if(!$no_subpage and $dir eq ".") {
        my $title = $page->{title};$title =~ s/\s*-.*//g;
        $dir = build_dir($dir,$title);
        mkdir $dir unless(-d $dir);
    }
    if($page->{forums}) {
        foreach my $idx (0 .. $#{$page->{forums}}) {
            my $subdir = build_dir($dir,$page->{forums}->[$idx]->[1]);
            my $suburl = $page->build_url($page->{forums}->[$idx]->[0],$url);
            $g_HANDLER->push(undef,"process_url", $subdir,$suburl,0,$prompt . " forum " . min_max($idx,$#{$page->{forums}}),$type);
        }
    }
    if((!$no_subpage) and  $page->{pages}) {
        foreach my $idx (0 .. $#{$page->{pages}}) {
            my $suburl = $page->build_url($page->{pages}->[$idx],$url);
            $g_HANDLER->push(undef,"process_url", $dir,$suburl,1,$prompt . " page " . min_max($idx,$#{$page->{pages}}),$type);
        }
    }
    else {
        foreach my $idx (0 .. $#{$page->{threads}}) {
            my $suburl = $page->build_url($page->{threads}->[$idx]->[0],$url);
            my $subfile = $page->{threads}->[$idx]->[1];
            $g_HANDLER->push(undef,"save_post",$dir,$subfile,$suburl,$prompt . " thread " . min_max( $idx,$#{$page->{threads}} . " "),undef,$type);
        }
    }
    $page->delete();
}



sub write_thread_dbase {
    my $str = shift;
    my $flag_no_save = shift;
    return undef if($THREAD_DBASE{$str});
    $str =~ s/^[a-zA-Z]+:\/+[^\/]+//;
    return undef if($THREAD_DBASE{$str});
    return 1 if($flag_no_save);
    $THREAD_DBASE{$str}=1;
    my $rand_number = int(rand(10));
    if($rand_number == 5)
    {
        &save_thread_dbase
    }
    return 1;
}

sub load_thread_dbase
{
    my $file = $g_START_DIRECTORY . "/" . THREAD_DBASE_FILE;
    if(-f $file)
    {
        open FI,"<",$file;
        while(<FI>) {
            chomp;
            $THREAD_DBASE{$_}=1;
        }
        close FI;
    }
}

sub save_thread_dbase
{
    my $file = $g_START_DIRECTORY . "/" . THREAD_DBASE_FILE;
    app_message "Saving thread dbase...\n";
    open FO,">",$file;
    foreach(keys %THREAD_DBASE) {
        print FO "$_\n";
    }
    close FO;
    
}

{
    my $killingme=0;
    sub sig_killed {
        return if($killingme);
        $killingme=1;
        app_warning "\nI AM KILLED!!!\n";
        if($g_HANDLER->{lastStack}) {
            $g_HANDLER->push(@{$g_HANDLER->{lastStack}});
        }
        chdir($g_START_DIRECTORY);
        app_message "saving remained tasks...\n";
        $g_HANDLER->saveToFile(RESUME_DATA_FILE);
        app_message $g_HANDLER->length," tasks saved to ",RESUME_DATA_FILE,"\n";
        &save_thread_dbase;
        exit 2;
    }
}

my %OPTS;
my @OPTIONS = qw/help|h|? version|ver edit-me manual|man save=s text attachment image all/;
if(@ARGV)
{
    require Getopt::Long;
    require MyPlace::Usage;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
    MyPlace::Usage::Process(\%OPTS,$VERSION);
}

my %SAVE_TYPE;
if($OPTS{save})
{
    $_ = $OPTS{save};
    if('all' =~ m/$_/)
    {
        $SAVE_TYPE{all}=1;
    }
    else
    {
        if('text' =~ m/$_/)
        {
            $SAVE_TYPE{text}=1;
        }
        if('image' =~ m/$_/)
        {
            $SAVE_TYPE{image}=1;
        }
        if('attachment' =~ m/$_/)
        {
            $SAVE_TYPE{attachment}=1;
        }
    }
}
if($OPTS{all})
{
    $SAVE_TYPE{all}=1;
}
else
{
    $SAVE_TYPE{text} = 1 if($OPTS{text});
    $SAVE_TYPE{image} = 1 if($OPTS{image});
    $SAVE_TYPE{attachment} = 1 if($OPTS{attachment});

}
if(%SAVE_TYPE)
{
    $g_TYPE = '|' . join('|',keys %SAVE_TYPE) . '|';
}


my $url = shift;
$g_USER = shift;
$g_PASS = shift;
my @urls;
$g_HANDLER = MyPlace::ReEnterable->new('main');

if($url) {
    if($url eq '-') {
        app_message "Input URLs:\n";
        while(<STDIN>) {
            chomp;
            push @urls,$_ if($_);
        }
        app_message scalar(@urls)," URLs read.\n";
    }
    else {
        push @urls,$url;
    }
}

if(@urls) {
    $url = $urls[0];
    $g_HANDLER->setState("urls",[@urls]);
    foreach(@urls) {
        if($_ =~ m/^\s*([^\s]+)\s+([^\s#]+)/) {
            $g_HANDLER->push(undef,"process_url",".",$1,0,"",$2);
        }
        else {
            $g_HANDLER->push(undef,"process_url",".",$_,0,"");
        }
    }
    $g_HANDLER->saveToFile(RESUME_DATA_FILE);
}
else {
    app_message "Loading resuming data...";
    $g_HANDLER->loadFromFile(RESUME_DATA_FILE);
    $g_TYPE = $g_HANDLER->getState("type") || "text";
    $g_USER = $g_HANDLER->getState("user"); 
    $g_PASS = $g_HANDLER->getState("pass"); 
    app_message "--no-prefix","\tGet " . $g_HANDLER->length . " tasks\n";
}

unless($g_USER) {
    app_message "Input user name,please:";
    $g_USER = readline(*STDIN);
    chomp $g_USER;
}
unless($g_PASS) {
    app_message "Input password,please:";
    $g_PASS = readline(*STDIN);
    chomp $g_PASS;
}


die("Usage:$0 [OPTIONS] [URL|-] [username] [password]\n") unless($g_HANDLER->length);

$g_HANDLER->setState("type",$g_TYPE || '|text|');
$g_HANDLER->setState("user",$g_USER);
$g_HANDLER->setState("pass",$g_PASS);
$g_START_DIRECTORY = getcwd();
$g_AUTO_RENAME=0;
$SIG{INT}=\&sig_killed;

if( -f "autorename.pl") {
    $g_AUTO_RENAME=1;
    do "autorename.pl";
}

&load_thread_dbase;
while(my $tasks = $g_HANDLER->length) {
    app_message "[$tasks] tasks remained\n";
    $g_HANDLER->run();
}
chdir($g_START_DIRECTORY);
unlink RESUME_DATA_FILE if(-f RESUME_DATA_FILE);
&save_thread_dbase;




__END__

=pod

=head1  NAME

discuz_download - downloader for discuz forums

=head1  SYNOPSIS

discuz_download [Options] [URL] [USERNAME] [PASSWORD]

=head1  OPTIONS

=over 12

=item B<--save [regexp]>

Select what to save, one or more of following values 
are supported.

    text:       Save text contents only
    image:      Save images only
    attachment: Save attachments only
    all:        Save all above    

If none matched, default value 'text' are used.

=item B<--text>

Shortcut for option: --save text

=item B<--image>

Shortcut for option: --save image

=item B<--attachment>

Shortcut for option: --save attachment

=item B<--all>

Shortcut for option: --save all

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

=head1  DESCRIPTION

Downloader for Discuz based forums

=head1  CHANGELOG

    2009-01-26  xiaoranzzz  <xiaoranzzz@gmail.com>

        * version 0.1, file created

    2010-06-18  xiaoranzzz  <xiaoranzzz@gmail.com>

        * make script using MyPlace::Usage instead of MyPlace::Script::Usage
        * clean up source code
        * add POD document
        * released as version 0.2 

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@gmail.com>

=cut


