#!/usr/bin/perl -w
###APPNAME:     epub_text2xhtml
###APPAUTHOR:   xiaoranzzz
###APPDATE:	Fri Jun  4 23:06:44 2010
###APPVER:	0.1
###APPDESC:     epub_text2xhtml	
###APPUSAGE:	
###APPEXAMPLE:	epub_text2xhtml
###APPOPTION:   -m:Mass covert muitiple files|-t:set TITLE|-c:set CSS|-r:set COPYRIGHT-i:set input filename|-o:set output filename
use strict;

#ENV variable MUST be defined somewhere,
#FOR perl to search modules from,
#OR nothing will work
use lib $ENV{XR_PERL_MODULE_DIR};

use MyPlace::Script::Usage qw/help_required help_even_empty/;
exit 0 if(help_required($0,@ARGV));
use utf8;
use Encode;
my $utf8 = find_encoding("utf8");
my @OLDARGV = @ARGV;
@ARGV = ();
foreach(@OLDARGV) {
    push @ARGV,$utf8->decode($_);
}
binmode STDERR,'utf8';
binmode STDOUT,'utf8';
binmode STDIN,'utf8';


my $number_exp = "(?:[一二三四五六七八九十零百千\\s]+|[123456789\\s]+|[１２３４５６７８９０\\s]+)";
my $H2_EXP = qr/
            ^\s*《(.+)》\s*$
            |^\s*(第${number_exp}+[章|部].*)\s*$
            |^\s*(section${number_exp}+.*)\s*$
            |^\s*(序${number_exp}*)\s*$
            |^\s*(序\s*[言章幕]${number_exp}*)\s*$
            /x;
my $H3_EXP = qr/
            ^\s*＜(.+)＞\s*$
            |^\s*(第${number_exp}+[节|篇].*)\s*$
            |^\s*(chapter${number_exp}+.*)\s*$
            |^\s*${number_exp}+$
            /x;
my $H4_EXP;
my $H5_EXP;

sub HEADER {
    my ($title,$css) = @_;
    return '<?xml version="1.0" encoding="utf-8"?>' . "\n"
           . '<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">' . "\n"
           . '<head>' . "\n"
           . '<meta name="generator" content="epub_text2xhtml, xiaoranzzz@myplace.hell" />' . "\n"
           . ($title ? "<title>$title</title>" . "\n" : "")
           . ($css ? "<link rel=\"stylesheet\" href=\"$css\" type=\"text/css\" />" . "\n" : "")
           . '<meta http-equiv="Content-Type" content="application/xhtml.xml; charset=utf-8" />' . "\n"
           . '</head>' . "\n"
           . '<body>' . "\n"
           . ($title ? "<h1 class=\"title\">$title</h1>" . "\n" : "")
           . '<div class="content">' . "\n";
}

sub BODY_TEXT
{
    my $result = "";
    foreach(@_)
    {
        s/[\n\r\s]+$//;
        next if(/^\s*$/);
        my ($class,$tag);
        if(/^<(h\d)>(.+)<\/(\1)>/) {
           $class = $1 eq 'h2' ? 'section_title' : 'chapter_title';
           $tag = $1;
           $_ = $2;
        }
        elsif(/$H2_EXP/oi) {
            $class = 'section_title';
            $tag = 'h2';
            $_ = $1 if($1);
        }
        elsif(/$H3_EXP/oi) {
            $class = 'chapter_title';
            $tag = 'h3';
            $_ = $1 if($1);
        }
        elsif($H4_EXP and $_ =~ m/$H4_EXP/oi) {
            $class = 'h4';
            $tag = 'h4';
            $_ = $1 if($1);
        }
        elsif($H5_EXP and $_ =~ m/$H5_EXP/oi) {
            $class = 'h5';
            $tag = 'h5';
            $_ = $1 if($1);
        }
        else {
            $class = 'paragraph';
            $tag = 'p';
        }
        next unless($_);
        $result .= "<$tag class=\"$class\">" . ($_ ? $_ : "") . "</$tag>\n";
    }
    return $result;
}

sub FOOTER {
   my($copyright) = @_;
   return   '</div>' . "\n"             #end of <div class="content">
            . '<div class="footer">' . "\n"
            . ($copyright ? '<p class="copyright">' . $copyright . "</p>\n" : "")
            . '</div>' . "\n"
            . '</body>' . "\n"
            . '</html>' . "\n";
}

use Getopt::Std;
my %opts;
getopts('ht:c:i:o:r:m2:3:4:5:',\%opts);
exit(system("formathelp",$0,"-h")) if($opts{"h"});
my ($title,$css,$copyright,$input,$output,$h2,$h3,$h4,$h5) = @opts{qw/t c r i o 2 3 4 5/};
$H2_EXP=qr/$h2/ if($h2);
$H3_EXP=qr/$h3/ if($h3);
$H4_EXP=qr/$h4/ if($h4);
$H5_EXP=qr/$h5/ if($h5);

$input = shift @ARGV unless($input);
$output = shift @ARGV unless($output);
if($opts{'m'}) {
    push @ARGV,$input if($input);
    push @ARGV,$output if($output);
    foreach my $filename (@ARGV) {
        my $basename = $filename;
        $basename =~ s/\.te?xt$//i;
        my $newname = "$basename.xhtml";
        $basename =~ s/.*\///;
        print STDERR "Coverting $filename to $newname ...\n";
        &convert($filename,$newname,$basename,$css,$copyright);
    }
}
else {
    &convert($input,$output,$title,$css,$copyright);
}
exit;

sub convert
{
    my($input,$output,$title,$css,$copyright) = @_;
    my ($FI,$FO);
    if(!$title)
    {
        $title = $input || $output;
        if($title)
        {
            $title =~ s/.*\///;
            $title =~ s/\.[^\.]*$//;
        }
    }
    if($input)
    {
        open $FI,"<:utf8",$input or die("$!\n");
    }
    else
    {
        $FI = *STDIN;
    }
    
    my $cached_output =  &HEADER($title,$css);
#    $cached_output .=  &BODY($firstline);
    $cached_output .=  &BODY_TEXT(<$FI>);
    close $FI;
    $cached_output .=  &FOOTER($copyright);
    if($output) {
        open $FO,">:utf8",$output or die("$!\n");
    }
    else {
        $FO = *STDOUT;
    }
    print $FO $cached_output;
}


