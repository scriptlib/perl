#!/usr/bin/perl -w
# $Id$
###APPNAME:     download
###APPAUTHOR:   geek
###APPDATE:	Fri Sep 28 08:31:24 2007
###APPVER:	0.2
###APPDESC:	A downloader,nothing else.
###APPUSAGE:	[options] URL
###APPEXAMPLE:	download www.google.com/index.html
###APPOPTION:	-v:Verbose Output|-u:URL to download|-s:Filename for output|-d:Create directories|-n:Task name|-r:Referer URL|-b:cookie file|-l:Enable Logging|-a:Auto rename if file exists|-p:Downloader - wget or curl-m:Max time for downloading|-f:Force over writting
use strict;
use lib $ENV{XR_PERL_MODULE_DIR};
use Cwd;
use MyPlace::Script::Message;
use Getopt::Long;
use Pod::Usage;
#exit 0 if(help_even_empty($0,@ARGV));

my @OPTIONS = qw/
		help|h
		manual|man
		verbose|v
		url|u:s
		saveas|s:s
		directory|d
		name|n:s
		cookie|b:s
		log|l
		refurl|r:s
		autoname|a
		program|p:s
		maxtime|m:i
		force|f
	/;
my %OPT;
if(@ARGV) {
	GetOptions(\%OPT,@OPTIONS);
}
else {
	$OPT{help} = 1;
}
if($OPT{help}) {
	pod2usage('-exitval'=>1,'-verbose'=>1);
}
elsif($OPT{manual}) {
	pod2usage('--exitval'=>1,'-verbose'=>2);
}




my $proxy = '127.0.0.1:9050';
my $blocked_host = '\n';#wretch\.cc|facebook\.com|fbcdn\.net';
my $BLOCKED_EXP = qr/^[^\/]+:\/\/[^\/]*(?:$blocked_host)(?:\/?|\/.*)$/;
my @WGET = qw{
    wget --user-agent Mozilla/5.0 --connect-timeout 15 -q --progress bar
};
my @CURL = qw{
        curl
		--fail --globoff --location
		--user-agent Mozilla/5.0
		--progress-bar --create-dirs
		--connect-timeout 15
};

sub log($$) {
    my $text=shift;
    my $fn=shift;
    open FO,">>",$fn or return;
    print FO $text;
    close FO;
}

sub build_cmdline {
    my($name,$url,$saveas,$refer,$cookie,$verbose,$maxtime) = @_;
    return undef unless($url);
    my @result;
    if($name =~ /^wget$/i) {
        push @result,@WGET;
        push @result,"--referer",$refer ? $refer : $url;
        push @result,"--output-document",$saveas if($saveas);
        push @result,"--load-cookie",$cookie if(-f $cookie);
        push @result,"--save-cookie",$cookie if($cookie);
        push @result,'--read-timeout',$maxtime if($maxtime);
        push @result,$url;
    }
    else {
        push @result,@CURL;
        push @result,"--url",$url;
        push @result,"--referer",$refer ? $refer : $url;
        push @result,"--output",$saveas if($saveas);
        push @result,"--cookie",$cookie if(-f $cookie);
        push @result,"--cookie-jar",$cookie if($cookie);
        push @result,"--max-time",$maxtime if($maxtime);
        if($url =~ $BLOCKED_EXP) {
            app_message "USE PROXY $proxy\n";
            push @result,"--socks5-hostname",$proxy;
        }
    }
    return @result;
}

sub process {
    my $taskname=shift;
    my $cmdline=shift;
    my $retry = shift || 2;
    my $r=0;
    while($retry) {
        $retry--;
        $r=system(@{$cmdline});
        return 0 if($r==0);
        return 2 if($r==2); #/KILL,TERM,USERINT;
        $r = $r>>8;
        #2 =>
        #22 => Request Error 404,403
        #56 => Recv failure: Connection reset by peer
        return $r if($r == 2 or $r == 22 or $r == 56 or $r == 6);
        app_warning "\rdownload:error($r), wait 1 second,retry $taskname\n";
        sleep 1;
    }
    return 1;
}


#my $OptFlag='m:lvu:s:dn:r:b:ap:f';
#my %OPT;
#getopts($OptFlag,\%OPT);

my $verbose= $OPT{verbose} || 0;
my $url= $OPT{"url"} || shift(@ARGV);
my $saveas= $OPT{"saveas"} || '';
my $createdir= $OPT{"directory"} || 0;
my $name= $OPT{"name"} || "";
my $refer= $OPT{"refurl"} || "";
my $cookie= $OPT{cookie} || '';
my $logging= $OPT{log} || '';
my $autorename = $OPT{autoname}  || '';
my $maxtime = $OPT{maxtime}  || '';
my $force = $OPT{force} || undef;
my $downloader = $OPT{program} || 'curl';
my $FAILLOG="download.failed";
my $DOWNLOADLOG="download.log";

if ($url !~ m/^\w+:\/\// ) {
    app_message("invaild URL:\"",$url,"\"\n");
    exit 1;
}

$url =~ s/\ /%20/g;
$refer=$url unless($refer);
if($createdir && !$saveas) {
    my $filename=$url;
    $filename =~ s/^\w+:\/+[^\/]*\/+//;
    $filename =~ s/^[^\?]*\?[^\/]*\/+//g;
    $saveas=$filename;
}
if(!$saveas) {
    my $basename=$url;
    $basename =~ s/^.*\///g;
    $basename = "index.htm" unless($basename);
    $saveas=$basename;
}
if($saveas =~ m/\/$/) {
    $saveas .= "index.htm";
}
if($saveas and $autorename and -f $saveas) {
    my $base = $saveas;
    my $ext;
    if($saveas =~ m/^(.*)(\.[^\.]*)$/) {
        $base = $1;
        $ext = $2;
    }
    use MyPlace::Filename qw/get_uniqname/;
    $saveas = get_uniqname($base,$ext);
}

if($verbose) {
    app_message(sprintf("%s\n%-8s: %s\n%-8s: %s\n%-8s: %s\n",
            $name ? "\n$name" : "",
            "URL",$url,
            "SaveAs",$saveas,
            "Refer",$refer));
}
else {
    app_message "$name$url\t[starting]\n";
}

if ((!$force) and -f "$saveas" ) {
    app_warning "$saveas exists\t[canceled]\n";
    exit 0;
}

if($cookie) {
    if(!-f $cookie) {
        app_message "creating cookie for $url...\n";
        my @match = $url =~ /^(http:\/\/[^\/]+)\//;
        if(@match) {
            my $domain=$match[0];
            system("curl --url '$domain' -c '$cookie' -o '/dev/null'");
        }
    }
}

my $saveas_temp = "$saveas.downloading";
my @cmdline = build_cmdline($downloader,$url,$saveas_temp,$refer,$cookie,$verbose,$maxtime);
my $r=process("$name$url",\@cmdline,2);

if($r==0 and -f $saveas_temp) {
    unlink ($saveas) if(-f $saveas);
    rename($saveas_temp,$saveas) or die("$!\n");
    &log("$url->$saveas\n","$DOWNLOADLOG") if($logging);;
    app_ok "$name$saveas\t[completed]\n";
    exit 0;
}
elsif($r==2) {
    unlink $saveas_temp if(-f $saveas_temp);
    app_warning "$name$url\t[killed]\n";
    exit 2;
}
else {
    unlink $saveas_temp if(-f $saveas_temp);
    app_error "$name$url\t[failed]\n";
    &log("$url->$saveas\n","$FAILLOG") if($logging);;
    exit 0;
}

__END__

=pod

=head1 NAME

download - customized frontend for wget/curl

=head1 SYNOPSIS

download [OPTIONS] URL

	download "http://www.google.com"
	download -s google.html "http://www.google.com"
	download -a "http://www.google.com"

=head1 OPTIONS

=over

=item B<--verbose>,B<-v>

Verbose messaging

=item B<--url>,B<-u>

Specify the URL

=item B<--saveas>,B<-s>

Specify target filename

=item B<--directory>,B<-d>

Create directories if necessary

=item B<--name>,B<-n>

Name downloading session

=item B<--refurl>,B<-r>

Set referer URL

=item B<--cookie>,B<-b>

Set cookie file

=item B<--log>,B<-l>

Enable logging

=item B<--autoname>,B<-a>

Auto rename if target exists

=item B<--program>,B<-p>

Specify downloader, either wget or curl

=item B<--maxtime>,B<-m>

Set timeout

=item B<--force>,B<-f>

Force overwritting

=back

=head1 DESCRIPTION

Not a downloader indeed, but simply a frontend for
some real downloader e.g. B<curl> or B<wget>.

=head1 CHANGELOG

2007-10-28	xiaoranzzz	<xiaoranzzz@myplace.hell>

* Initial version

2012-12-19	xiaoranzzz	<xiaoranzzz@myplace.hell>

* Add pod document
* Use Getopt::Long.

=head1 AUTHOR

xiaoranzzz <xiaoranzzz@myplace.hell>

=cut



