#!/usr/bin/perl -w
# $Id$
use strict;
require v5.10.0;
our $VERSION = 'v1.1';
BEGIN
{
    our $PROGRAM_DIR;
    $PROGRAM_DIR = $0;
    $PROGRAM_DIR =~ s/[^\/\\]+$//;
    $PROGRAM_DIR = "./" unless($PROGRAM_DIR);
    unshift @INC, 
        map "$PROGRAM_DIR$_",qw{modules lib ../modules ..lib};
}
my %OPTS;
my @OPTIONS = qw/help|h|? version|ver edit-me manual|man simple|s read|r/;
if(@ARGV)
{
    require Getopt::Long;
    require MyPlace::Usage;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
    MyPlace::Usage::Process(\%OPTS,$VERSION);
}
else
{
    require MyPlace::Usage;
    MyPlace::Usage::PrintHelp();
}

use Env qw(USER HOSTNAME);
our $PROGRAM_DIR;
my $pldir=$PROGRAM_DIR;#$ENV{XR_PERL_SOURCE_DIR};
die "Can't not locate script directory.\n" if(!$pldir);
die "Direcoty not exists:\"$pldir\"\n" if (! -d $pldir);

my $OPT_READ = $OPTS{'read'};
my $OPT_SIMPLE = $OPTS{'simple'};
my $NAME = shift @ARGV;
die("Invalid usage.\n") unless($NAME);

print STDERR "Using source directory:$pldir\n";
my $fname = $NAME;

if(-f "$pldir/$fname") {
    $fname="$pldir/$fname";
}
elsif(-f "$pldir/$fname.pl") {
    $fname="$pldir/$fname.pl";
}
elsif( $fname =~ /\.[^\.]*$/) {
    $fname="$pldir/$fname";
}
else {
    #$fname=$pldir . "/" . $fname . ".pl";
    $fname=$pldir . "/" . $fname;
}


my $editor="r-edit";
$editor = "notepad++" if($^O =~ /win/i);

if (-f $fname) {
    print STDERR "$fname exists,will be open for editing instead.\n";
    exec $editor,$fname;
    exit 0;
}

open PIPE,">:utf8",$fname or die("$!\n");

use POSIX qw/strftime/;
my $DATE= strftime("%Y-%m-%d",localtime());
$USER="xiaoranzzz" unless($USER);
my $EMAIL="$USER\@" . (defined $HOSTNAME ? $HOSTNAME : "myplace.hell");

if($OPT_SIMPLE) {
    print PIPE "#!/usr/bin/perl\n";
}
else {
    my $template=$pldir . "/" .  "script_template";
    if(-f $template) {
        open TEMPDATA,'<',$template;
        while(<TEMPDATA>) {
            s/___EMAIL___/$EMAIL/g;
            s/___AUTHOR___/$USER/g;
            s/___NAME___/$NAME/g;
            s/___DATE___/$DATE/g;
            print(PIPE);
        }
        close(TEMPDATA);
    }
}
if($OPT_READ) {
    while(<STDIN>) {
        s/___EMAIL___/$EMAIL/g;
        s/___AUTHOR___/$USER/;
        s/___NAME___/$NAME/;
        s/___DATE___/$DATE/;
        print(PIPE);
    }
}
close(PIPE);
if(-f $fname)
{
    use File::stat;
    my $oldst = stat($fname);
    system("\"$editor\" \"$fname\"");
    my $newst = stat($fname);
    if($oldst->mtime < $newst->mtime) {
        print STDERR "$fname modified.\n";
        print STDERR "make it executable.\n";
        chmod(0775,$fname) or print STDERR "$!\n";
        if($ENV{XR_PERL_BINARY_DIR}) {
            system("ln","-sfv",$fname,"$ENV{XR_PERL_BINARY_DIR}/$NAME");
        }
    }
    else {
        print STDERR "$fname remain the same.\nunlink it.\n";
        unlink($fname) or print STDERR "$!\n";
    }
}


__END__

=pod

=head1  NAME

plnew2 - PERL script

=head1  SYNOPSIS

plnew2 [options] ...

=head1  OPTIONS

=over 12

=item B<-s>,B<--simple>

Disable using template.

=item B<-r>,B<--read>

Read template from STDIN

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

=head1  DESCRIPTION

___DESC___

=head1  CHANGELOG

    2010-06-06  xiaoranzzz  <xiaoranzzz@myplace.hell>
        
        * recreated from new template
        * set version 1.1

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@myplace.hell>

=cut


