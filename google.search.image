#!/usr/bin/perl -w
use strict;
require v5.8.0;
our $VERSION = 'v0.1';

BEGIN
{
    my $PROGRAM_DIR = $0;
    $PROGRAM_DIR =~ s/[^\/\\]+$//;
    $PROGRAM_DIR = "./" unless($PROGRAM_DIR);
    unshift @INC, 
        map "$PROGRAM_DIR$_",qw{modules lib ../modules ..lib};
}

my %OPTS;
my @OPTIONS = qw/help|h|? version|ver edit-me manual|man/;

if(@ARGV)
{
    require Getopt::Long;
    require MyPlace::Usage;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
    MyPlace::Usage::Process(\%OPTS,$VERSION);
}
else
{
    require MyPlace::Usage;
    MyPlace::Usage::PrintHelp();
}

use MyPlace::Google::Search;

my %SIZE_BASE = 
(
    'k'=>1024,
    'K'=>1024,
    'm'=>1024*1024,
    'M'=>1024*1024,
    'g'=>1024*1024*1024,
    'G'=>1024*1024*1024,
    'b'=>1,
    'B'=>8,
);
sub compare_size
{
    my($left,$right) = @_;
#    print STDERR "Compare_size $left : $right\n"; 
    return undef unless($left and $right);
    if($left =~ m/^(\d+)([kKmMgG])/) {
       $left = $1 * $SIZE_BASE{$2}; 
    }
    if($right =~ m/^(\d+)([kKmMgG])/) {
       $right = $1 * $SIZE_BASE{$2}; 
    }
    return 
        $left == $right ? 0
        : $left > $right ? 1 
        : -1;
}

my $query = shift;
my $page;
my $page_count;
my $type;
my $size;
my %params;
foreach(@ARGV) {
    if($_ =~ /^\s*([^=]+)\s*=\s*(.+)\s*$/) {
        if($1 eq 'page' or $1 eq 'start_page' or $1 eq 'startpage') {
            $page = $2;
        }
        elsif($1 eq 'size') {
            $size = $2;
            $params{size} = $2;
        }
        elsif($1 eq 'pages' or $1 eq 'page_count' or $1 eq 'pagecount') {
            $page_count = $2;
        }
        else {
            $params{$1} = $2;
        }
    }
    else {
        print STDERR "Invalid params [$_]\n";
    }
}
#$params{'type'} = 'xxlarge' unless($params{'size'} or $params{'type'});
$page = 1 unless($page and $page =~ m/[0-9]+/ and  $page>1);
$page_count = 1 unless($page_count and $page_count =~ m/[0-9]+/ and  $page_count>1);
my $page_end = $page + $page_count -1;
foreach my $page_idx ($page .. $page_end)
{
REDOIT:
    print STDERR "Searching for $query, page [$page_idx/$page_end] ...\n";
    my ($status,$images) = MyPlace::Google::Search::search_images($query,$page_idx,%params);
    if($status and $images) {
        #print STDERR ref $images,"\n";
        if (!((ref $images) eq 'ARRAY')) {
            goto REDOIT;
        }
        my $count = scalar(@{$images});
        print STDERR "Get " . scalar(@{$images}) . " image[s].\n";
        if($size and $size =~ m/^\s*\d+\s*[kKmMgG]?$/) {
            my $small_image=0;
            foreach(@{$images}) {
                if(compare_size($_->{size},$size) > 0) {
                    print $_->{url},"\n";
                }
                else {
                   $small_image++; 
                }
            }
            if($small_image>0) {
                print STDERR "$small_image images which smaller than $size were SKIPPED\n";
            }
        }
        else {
            print $_->{url},"\n" foreach(@{$images});
        }
		my $old_fh = select(STDOUT); 
		$| = 1;
		select($old_fh);
        if($page_idx < $page_end and $count < 10)
        {
            print STDERR "Less than 10 images returned, Ingored remain pages\n";
            last;
        }
    }
    else {
        print STDERR $images,"\n";
    }
}



__END__

=pod

=head1  NAME

google.search.image - searching image.google.com 

=head1  SYNOPSIS

google.search.image [options] keyword [param1=value1 param2=value2 ...]

    google.search.image 'Hello+Kitty' size=100k
    google.search.image '(Hello|Kitty)' size=100k
    google.search.image 'Hello -Kitty)' size=100k
    google.search.image '"Hello Kitty"' size=100k

=head1  OPTIONS

=over 12

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

Searching image.google.com, print out results to STDOUT

___DESC___

=head1  CHANGELOG

    2010-06-11  xiaoranzzz  <xiaoranzzz@myplace.hell>
        
        * file created.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@myplace.hell>

=cut







