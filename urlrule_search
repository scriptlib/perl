#!/usr/bin/perl -w
# $Id$
package MyPlace::Script::urlrule_search;
use strict;
use MyPlace::Script::Message;
use MyPlace::Program;
use MyPlace::URLRule::OO;
our %EXIT_CODE = %MyPlace::Program::EXIT_CODE;

our $VERSION = 'v0.1';
my @OPTIONS = qw/
	help|h|? 
	manual|man
	engine|e=s
	dest|directory=s
	action=s
	group|g=s
	all|a
	subdir|sd=s
	method|by|m=s
	grep
	append
	simple
	force
/;
my %OPTS;
if(@ARGV)
{
    require Getopt::Long;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
}
if($OPTS{'help'} or $OPTS{'manual'}) {
	require Pod::Usage;
	my $v = $OPTS{'help'} ? 1 : 2;
	Pod::Usage::pod2usage(-exitval=>$v,-verbose=>$v);
    exit $v;
}

sub _safe_path {
	foreach(@_) {
		next unless($_);
		s/[\<\?*\:\"\|\>]+/_/;
		s/^\.+//g;
		s/:/ - /g;
		#s/[\/\\\?\*]/_/g;
		s/^\s+|[\.\s]+$|(?<=\/)\s+|[\.\s]+(?=\/)//g;
		s/\s+/ /g;
	}
	if(wantarray) {
		return @_;
	}
	else {
		return $_[0] if($_[0]);
	}
}

sub append_file {
	my $dst = shift;
	my $src = shift;
	my %holder;
	if(open FI,"<",$dst) {
		foreach(<FI>) {
			$holder{$_} = 1;
		}
		close FI;
	}
	if(!open FO,">>",$dst) {
		print STDERR "Error writting $dst ...\n";
		return 2;
	}
	if(!open FI,"<",$src) {
		print STDERR "Error reading $src ...\n";
		return 3;
	}
	my $count = 0;
	foreach(<FI>) {
		next if($holder{$_});
		print FO $_;
		$count ++;
	}
	close FI;
	close FO;
	print STDERR "Append $src ($count lines) to $dst\n";
	return 0;
}

sub do_action {
	my $OPTS = shift;
	my $action = shift;
	my @request = @_;
	my $idx = 0;
	my $URLRULE = new MyPlace::URLRule::OO(
			'action'=>$action,
			'thread'=>$OPTS->{thread},
			'createdir'=>1,
			'buildurl'=>1,
			'force'=>$OPTS->{force},
			'options'=>{
				fullname=>$OPTS->{fullname},
				force=>$OPTS->{force},
			},
			'include'=>$OPTS->{include},
			'exclude'=>$OPTS->{exclude},
	);
	my $count = @request;
	foreach(@request) {
		$idx++;
		$_->{progress} = "[$idx/$count]";
		if($_->{direct}) {
			$URLRULE->{request}->{"dbfile"} = "urls.good.lst";
		}
		elsif($OPTS{simple}) {
			$URLRULE->{request}->{"dbfile"} = "urls.lst";
		}
		else {
			$URLRULE->{request}->{"dbfile"} = "urls.search.lst";
		}
		$URLRULE->autoApply($_);
		$URLRULE->reset();
	}
	if($URLRULE->{DATAS_COUNT}) {
		return $EXIT_CODE{OK};
	}
	else {
		return $EXIT_CODE{DO_NOTHING};
	}
}


my %ENGINES = (
	'xhdporno.club'=>{
		domain=>'xhdporno.club',
		keyword=>['https://xhdporno.club/search?text=###QUERY###',2,'%20'],
		category=>['https://xhdporno.club/category/###QUERY###/',2,'-'],
		name=>['https://xhdporno.club/models/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
		direct=>1,
		no_grep=>1,
	},
	'hifiporn'=>{
		domain=>'hifiporn.cc',
		keyword=>['https://hifiporn.cc/xxx/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
	},
	'mypornvid.cc'=>{
		domain=>'mypornvid.cc',
		keyword=>['https://mypornvid.cc/videos/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
	},
	'pornmaster.cc'=>{
		domain=>'pornmaster.cc',
		keyword=>['https://pornmaster.cc/hd/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
	},
	'txxx'=>{
		domain=>'txxx.com',
		keyword=>['https://www.txxx.com/search/?s=###QUERY###',2,'+'],
		category=>['https://www.txxx.com/categories/###QUERY###/',2,'-'],
		name=>['https://www.txxx.com/models/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
		disabled=>1,
	},
	'spankbang'=>{
		domain=>'spankbang.com',
		keyword=>['https://spankbang.com/s/###QUERY###/',2,'+'],
		category=>['https://spankbang.com/category/###QUERY###/',2,'+'],
		tags=>['https://spankbang.com/tag/###QUERY###/',2,'+'],
		groups=>'default,porn,nsfw',
		disabled=>1,
	},
	'xhamster'=>{
		domain=>'xhamster15.com',
		keyword=>['https://xhamster15.com/search?q=###QUERY###',2,'+'],
		name=>['https://xhamster15.com/pornstars/###QUERY###',2,'-'],
		category=>['https://xhamster15.com/categories/###QUERY###',2,'-'],
		tags=>['https://xhamster15.com/tags/###QUERY###',2,'-'],
		groups=>'porn,nsfw',
	},
	'tubepornclassic'=>{
		domain=>'tubepornclassic.com',
		category=>['https://tubepornclassic.com/categories/###QUERY###',2,'-'],
		keyword=>['https://tubepornclassic.com/search/###QUERY###',2,'%20'],
		name=>['https://tubepornclassic.com/models/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
		disabled=>1,
	},
	'megatube'=>{
		domain=>'megatube.xxx',
		category=>['https://www.megatube.xxx/###QUERY###.porn',2,'-'],
		name=>['https://www.megatube.xxx/###QUERY###.pornstar',2,'-'],
		keyword=>['https://www.megatube.xxx/search/###QUERY###/',2,'-'],
		groups=>'porn,nsfw',
		disabled=>1,
	},
	'noodlemagazine.com'=>{
		domain=>"pornomilf.club",
		keyword=>["https://noodlemagazine.com/video/###QUERY###",2,' '],
		groups=>"porn,nsfw",
	},
	'pornomilf.club'=>{
		domain=>"pornomilf.club",
		keyword=>["https://pornomilf.club/###QUERY###/",3,' '],
		groups=>"porn,nsfw",
	},
	'javmobile'=>{
		domain=>'javmobile.mobi',
		keyword=>['https://javmobile.mobi/videos/###QUERY###/',3,'-'],
		groups=>'jav,nsfw',
	},
	'yase'=>{
		domain=>'yase520.com',
		keyword=>['https://w.9huase.com/search/keywords/###QUERY###',2,'%20'],
		groups=>'clips,jav,homemade,cn,leakage,nsfw',
		disabled=>1,
	},
	'kedou'=>{
		domain=>'kedou.xxx',
		keyword=>['http://www.xiaobi014.com/search/###QUERY###/',2,'-'],
		groups=>'clips,jav,homemade,cn,leakage,nsfw',
	},
	'javwide'=>{
		domain=>'javwide.com',
		keyword=>['https://www5.javwide.com/search/movie?q=###QUERY###',3,'+'],
		tags=>['https://www5.javwide.com/tag/###QUERY###',3,'-'],
		category=>['https://www5.javwide.com/category/###QUERY###',3,'-'],
		name=>['https://www5.javwide.com/star/###QUERY###',3,'-'],
		groups=>'jav,nsfw',
		disabled=>1,
	},
	'ku137'=>{
		domain=>'ku137.net',
		keyword=>['https://www.ku137.net/plus/search.php?q=###QUERY###',2,'+'],
		groups=>'babes,babe',
		encode=>'gb2312',
	},
	'555duo'=>{
		domain=>'555duo.net',
		keyword=>['https://www.555duo.net/plus/search.php?keyword=###QUERY###',2,'+'],
		groups=>'babes,babe',
		encode=>'gb2312',
	},
	'd8swe.xyz'=>{
		domain=>'d8swe.syz',
		keyword=>['http://avid8eo.ainjijj.space/v/search?title=###QUERY###',2,'+'],
		tags=>['http://avid8eo.ainjijj.space/v/search?tag_name=###QUERY###',2,'+'],
		groups=>'jav,porn,clips,cn,homemade,leakage,nsfw',
	},
	'tom203.com'=>{
		domain=>'tom203.com',
		keyword=>['https://tom386.com/e/search/index.php?keyboard=###QUERY###&show=title&tbname=movie&tempid=1',3,'+'],
		groups=>'jav,porn,clips,cn,homemade,leakage,nsfw',
		sites=>['https://tom386.com/',4],
	},
	'ddxzp.com'=>{
		domain=>'ddxzp.com',
		sites=>['http://ddxzp.com/video/category/free?pageNo=1&pageSize=60',1,''],
		groups=>'sites',
	},
	'hg-22.xyz'=>{
		domain=>'hg-22.xyz',
		sites=>['https://hg-22.xyz/',3,''],
		keyword=>['https://hg-22.xyz/index.php/vod/search.html?wd=###QUERY###',2,'+'],
		tags=>['https://hg-22.xyz/index.php/vod/search/tag/###QUERY###.html',2,'+'],
		groups=>'jav,homemade,leakage,nsfw,clips,cn',
	},
	'fi11.com'=>{
		domain=>'fi11.com',
		sites=>['https://www.hxcpp10.com/',2],
		groups=>'sites',
	},
	'ps5566.com'=>{
		domain=>'ps5566.com',
		sites=>['https://ps5566.com/',3],
		groups=>'sites',
	},
	'arzon.jp'=>{
		domain=>'arzon.jp',
		keyword=>['https://www.arzon.jp/itemlist.html?t=&m=all&s=&q=###QUERY###',2,'+'],
		tags=>['https://www.arzon.jp/itemlist.html?t=&m=all&s=&q=###QUERY###',2,'+'],
		groups=>'jav,nsfw,covers',
	},
	'bbs.my9600.com'=>{
		domain=>'bbs.my9600.com',
		sites=>['https://bbs.my9600.com/',3],
		groups=>'sites',
	},
);

my %engine;
my @engine;

if($OPTS{all}) {
	%engine = map {$_=>1} keys %ENGINES;
}
elsif($OPTS{engine}) {
	foreach(keys %ENGINES) {
		if(m/$OPTS{engine}/) {
			$engine{$_} = 1;
		}
	}
}
else{
	$OPTS{group} = 'default' unless($OPTS{group});
	foreach(keys %ENGINES) {
		my $groups = $ENGINES{$_}->{groups};
		next unless($groups);
		if($groups =~ m/$OPTS{group}/) {
			$engine{$_} = 1;
		}
	}
}
$OPTS{method} = "keyword" unless($OPTS{method});
$OPTS{method} = 'keyword|category|name|tags' if(lc($OPTS{method}) eq 'all');
foreach(keys %engine) {
	next if(m/^#/);
	my $e = $ENGINES{$_};
	foreach my $method (keys %$e) {
		next if($method eq 'domain');
		next if($method eq 'group');
		next unless($method =~ m/$OPTS{method}/);
		if($e->{disabled}) {
			app_message2 "disabled engine $_\n";
		}
		else {
			app_message2 "uses engine $_, search by $method\n";
			push @engine,[$_,@{$e->{$method}}];		
		}
	}
}

if(!@engine) {
	app_error "No search engine specified\n";
	exit 1;
}

if(!@ARGV) {
	foreach my $fk(qw/keywords.lst keywords.txt names.txt/) {
		next unless(-f $fk);
		app_message2 "Read queires from <$fk>\n";
		open FI,'<',$fk or next;
		foreach(<FI>) {
			s/[\r\n]+$//;
			s/^\s*//;
			s/\s*$//;
			s/^[^:]*://;
			next unless($_);
			push @ARGV,$_;
			app_message2 "  : $_\n" 
		}
		close FI;
	}
}

if(!@ARGV) {
	app_warning "Usage:$0 [-d] <Queries...>\n";
	exit 1;
}

if($OPTS{subdir}) {
	$OPTS{dest} = _safe_path($OPTS{subdir});
}
if($OPTS{dest}) {
	if(! -d $OPTS{dest}) {
		mkdir $OPTS{dest} or die("Error creating directory $OPTS{dest}: $!\n");
	}
	chdir $OPTS{dest} or die("Error changing to directory $OPTS{dest}: $!\n");
	app_warning "Enter $OPTS{dest} ...\n";
}
if($OPTS{subdir}) {
	if(! -e 'urls.lst') {
		if(! -e "../urls.lst") {
			system("touch","--","../urls.lst");
		}
		system("ln","-svf","../urls.lst","urls.lst");
	}
}


#app_message2 "uses engines: [",join("],[", map($_->[0],@engine)),"]","\n";
my @QUERIES;
foreach(@ARGV) {
	s/\/+$//;
	s/^\.*\/+//;
	s/^\.+//;
	push @QUERIES,$_;
}
$OPTS{simple} = 1 if($OPTS{method} eq 'sites');

my @request;
foreach my $QUERY(@QUERIES) {
	foreach my $e(@engine) {
		my $key = $QUERY;
		my $name = $e->[0];
		my $url = $e->[1];
		my $level = $e->[2];
		my $space = $e->[3];
		my $direct = $e->[4];
		$direct = 1 if($ENGINES{$name}->{direct});
		
		if($OPTS{method} eq 'sites') {
			if($ENGINES{$name}->{domain} !~ $QUERY) {
				next;
			}
		}
		if($ENGINES{$name}->{encode}) {
			use Encode qw/from_to/;
			use URI::Escape qw/uri_escape/;
			from_to($key,"utf8",$ENGINES{$name}->{encode});
			$key = uri_escape($key);
		}
		#app_message2 "Search \<$QUERY\> using engine \[$name\]\n";
		$key =~ s/\s+/$space/g;
		$url =~ s/###QUERY###/$key/g;
		app_message2 "builds request [$level]$url\n";
		push @request,{
			count=>1,
			url=>$url,
			level=>$level,
			prompt=>"$name:$QUERY",
			direct=>$direct,
			engine=>$e,
		};
	}
}
#if(-f "urls.lst") {
#	app_message2 "backing up \"urls.lst\" ...";
#	rename "urls.lst","urls.lst." . scalar(time);
#}
my $action = $OPTS{action} || 'DATABASE';
app_message2 "with action:$action\n";
app_message2 "executing...\n";
my $exit = do_action(\%OPTS,$action,@request);
if($OPTS{simple}) {
}
elsif($OPTS{grep} and -f "urls.search.lst") {
	my $pat = join(" ",@QUERIES);
	my @prog = ("grep_edit","--filename","--output","urls.lst");
	push @prog,"--append" if($OPTS{append});
	push @prog,"--",$pat,"urls.search.lst";
	system(@prog);
}
foreach(qw/urls.good.lst urls.static.lst/) {
	next unless(-f $_);
	$exit = append_file("urls.lst",$_);
}

exit 1 unless(defined $exit);
exit $exit;

__END__

=pod

=head1  NAME

urlrule_search - PERL script

=head1  SYNOPSIS

urlrule_search [options] ...

=head1  OPTIONS

=over 12

=item B<--version>

Print version infomation.

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=item B<--edit-me>

Invoke 'editor' against the source

=back

=over 12

=item B<-e>,B<--engine>

Specify which engine for searching

=item B<-g>,B<--group>

Specify groups of searching engine

=item B<-m>,B<--method>

Specify methods for searching

=item B<--grep>

Execute B<greb_edit> against I<urls.lst>

=back


=head1  DESCRIPTION

___DESC___

=head1  CHANGELOG

    2014-10-15 03:14  xiaoranzzz  <xiaoranzzz@MyPlace>
        
        * file created.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@MyPlace>

=cut

#       vim:filetype=perl
