#!/usr/bin/perl -w
###APPNAME:     tagfs
###APPAUTHOR:   duel
###APPDATE:	Thu Apr 29 17:38:29 2010
###APPVER:	0.1
###APPDESC:     tagfs	
###APPUSAGE:	
###APPEXAMPLE:	tagfs
###APPOPTION:	[-r (root_directory)] tag1,tag2,tag3,... files...
use strict;

#ENV variable MUST be defined somewhere,
#FOR perl to search modules from,
#OR nothing will work
use lib $ENV{XR_PERL_MODULE_DIR};

use Getopt::Long;
use MyPlace::Script::Usage qw/format_help/;

my @OPTIONS = qw/
	help|h
	test|t
	root|r=s
	hard
	symbol|s
/;
my %OPTS;
my @SAVE_ARGV = @ARGV;
GetOptions(\%OPTS,@OPTIONS);
if(!@ARGV) {
	$OPTS{'help'} = 1;
}
if($OPTS{'help'}) {
	format_help($0);
	exit 1;
}


my $root = $OPTS{root} || "";
my $TEST = $OPTS{test};

if($root and $root !~ /\/$/) {
    $root = "$root/";
}

my $REALTAG='all';
my $tags;
my @tags;
my @files;
($tags,@files)=@ARGV;
die(format_help($0)) unless(@files);

my @linker = ('ln','-f', ($OPTS{hard} ? () : '-s'), '-t');
sub get_basename {
    my $fullname = shift;
    return unless($fullname);
    $fullname =~ s/\/+$//;
    $fullname =~ s/^.*\///;
    return $fullname;
}

sub system_execute {
    #print STDERR "-- ",join(" ",@_),"\n";
	if($TEST) {
		print STDERR "[TEST] Execute: ",join(" ",@_), "\n";
		return 1;
	}
	else {
	    return (system(@_) == 0);
	}
    open FI,"-|",@_ or return undef;
    while(<FI>) 
    {
        chomp;
        next unless $_;
        print FO "\t\t\t",$_,"\n";
        print STDERR "\t\t\t",$_,"\n";
    }
    return 1;
}
sub create_dir {
	if($TEST) {
		print STDERR "[TEST] Create directory: ",join(" ",@_), "\n";
		return 1;
	}
	else {
		foreach(@_) {
			return undef unless(system_execute('mkdir',$_));
		}
	}
	return 1;
}

sub now {
	use POSIX qw/strftime/;
	my $l = shift;
	return strftime(($l ? "%Y-%m-%d" : "%Y-%m-%d %H:%M:%S"),localtime);
}

if($root and (! -d $root)) {
	create_dir($root) or die("$!\n");
}
my $saved_in = "$root$REALTAG";
if(! -d $saved_in) {
    create_dir($saved_in) or die("$!\n");
}

my %tags;
@tags = split(/\s*,\s*/,$tags);
%tags = map {$_=>1} @tags;
die("Empty tag list!\n") unless(%tags);
$tags{now(1)} = 1 if($tags{new} || $tags{newly} || $tags{income} || $tags{incoming});#unless($tags{retag});
@tags = keys %tags;

my $log_files=$root . "tagfs.logs";
if(!$TEST) {
	open FO,">>$log_files";
}

sub log_text {
    print FO @_ unless($TEST);
    print @_;
    1;
}

sub list_dir {
	my $dir = $_[0];
	my $prefix = $_[1] || "";
	my @result;
	open FI,"-|",'ls','-sFh',"$dir/";
	@result = map "$prefix$_",<FI>;
	close FI;
	return @result;
}

#&log_text('[' . scalar(localtime) . "] tagfs " . join(" ",@SAVE_ARGV) . "\n");

sub link_file {
	my ($target,$link) = @_;
}

sub tag_files {
    foreach my $file (@_) {
       my $basename = get_basename($file);
       next if($basename eq '.' or $basename eq '..');
       &log_text("[" . join(',',@tags) . "] $basename\n");
	   &log_text("\t\t" . now() . "\n");
	   if(-d $file) {
			log_text(&list_dir($file,'  ├──') , "\n");
	   }
       if(! -e "$saved_in/$basename") {
            system_execute("mv","--",$file,$saved_in);
       }
       foreach my $tag (@tags) {
            if(! -d "$root$tag") {
                create_dir("$root$tag") or die("$!\n");
            }
            system_execute(@linker,"$root$tag","../$REALTAG/$basename");
       }
    }
}
use utf8;

use File::Glob qw/bsd_glob/;
foreach (@files) {
    if(-e $_) {
        tag_files($_);
    }
    else {
        tag_files(bsd_glob($_));
    }
}
close FO unless($TEST);



