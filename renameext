#!/usr/bin/perl -w 
###APPNAME:     renameext
###APPAUTHOR:   eotect
###APPDATE:	Sun Mar 30 12:46:15 2008
###APPVER:	0.1
###APPDESC:	rename files using perl regexp
###APPUSAGE:	[options] (pattern|func) (files...) 
###APPEXAMPLE:	renameext -t 's/^.*(\d+)\.jpg/$1' *\n\trenameext -t 'ucfirst' *
###APPOPTION:	--test, -t:Test mode on|--rule,-r:Use internal rule|--swap, -sw:Swap mode on|--no-dot,-nd:Replace dots|--force,-f:Override exists files
use strict;
$ARGV[0]="-h" unless(@ARGV);
use lib $ENV{XR_PERL_MODULE_DIR};

use utf8;
use Encode;
use Getopt::Long;
use MyPlace::Script::Usage qw/exit_usage/;
#binmode STDERR,"utf8";
#binmode STDOUT,"utf8";
#binmode STDIN,"utf8";

my %OPTS;
my @OPTIONS= qw/
	help|h|?
	test|t
	swap|sw:s
	force|f
	verbose|v
	debug
	rule|r:s
	dir|d:s
	delete
	lastname|l
	mkdir|makedir|make-dir|md
	copy|c
/;
GetOptions(\%OPTS,@OPTIONS);
exit_usage(0,$0) if($OPTS{'help'});

my $utf8 = find_encoding("utf8");
my @OLDARGV = @ARGV;
@ARGV = ();
foreach(@OLDARGV) {
    push @ARGV,$_;
}
#binmode STDERR,'utf8';
#binmode STDOUT,'utf8';
#binmode STDIN,'utf8';

sub strnum {
	my $val = shift;
	my $numlen = shift(@_) || 0;
	return $val if($numlen<2);
	return $val if($val >= (10**$numlen));
	my $str = "0"x$numlen . $val;
	return substr($str,length($str) - $numlen);
}

my $INTPOOL=1;

my %RULES = (
	'torrentname' => sub {
		my $old = shift;
		my $new = $old;
		my $tn = `torrent_info --pipe --key 'info->name.utf-8' "$old"`;
		chomp($tn);
		if($tn) {
			$tn = $utf8->decode($tn);
		}
		else {
			return $old;
		}
		if($new) {
			$new =~ s/\.[^\.]+$//;
		}
		else {
			$new = '';
		}
		$new = $new . "_" if($new);
		$new = $new . $tn . ".torrent";
		return $new;
	},
	'autonumber'=>sub {
		my $old = shift;
		my $new = $old;
		my $ext = '';
		my $prefix = '';
		if($new =~ m/^(.+)\/(.+)$/) {
			$prefix = $1;
			$new = $2;
		}
		if($new =~ m/\.([^\.\\\/]+)$/) {
			$ext = ".$1";
		}
		return $old if($new =~ m/\d\d\d\d\d\d\d\d$ext$/);
		my $filename = $prefix . strnum($INTPOOL,8) . $ext;
		while(-e $filename) {
			$INTPOOL++;
			$filename = $prefix . strnum($INTPOOL,8) . $ext;
		}
		return $filename;
	},
	cleanbegin1=>'s/(^|[\/\\\\])\s*(?:【.+?】|（.+?）)\s*/$1/',
	cleanend1=>'s/[_\s]*【?\d+[Pp]】?\s*$//',
	dotless=>'s/\.(?=.*\.)/ /g',
	trim=>'s/^\s+|[\.\s]+$|(?<=\/)\s+|[\.\s]+(?=\/)//g',
	noemoji=>'s/[\p{Emoticons}]+//g',
	#cjk=>'s/[^\p{CJK_Symbols_And_Punctuation}\p{CJK_Unified_Ideographs}\p{ASCII}]+//g',
	cjk=>'s/[^{\p{Punctuation}\p{CJK_Unified_Ideographs}\p{CJK_SYMBOLS_AND_PUNCTUATION}\p{HALFWIDTH_AND_FULLWIDTH_FORMS}\p{CJK_COMPATIBILITY_FORMS}\p{VERTICAL_FORMS}\p{ASCII}\p{LATIN}\p{CJK_Unified_Ideographs_Extension_A}\p{CJK_Unified_Ideographs_Extension_B}\p{CJK_Unified_Ideographs_Extension_C}\p{CJK_Unified_Ideographs_Extension_D}]//g',
	fixweipai=>sub {
		my $old = shift;
		my $new = $old;
		my $p1;
		my $p2;
		if($new =~ m/^(.*\/)([^\/]+)$/) {
			$p1 = $1;
			$p2 = $2;
		}
		else {
			$p1 ='';
			$p2 = $new;
		}
		$_ = $p2;
		s/^(201\d)(\d\d)(\d\d)(\d\d)\d\d/$1$2$3$4/;
		s/^(201\d)(\d)(\d)(\d)(\d\d)([\._])/${1}0${2}0${3}0${4}${6}/;
		s/^(201\d)([2-9])(\d\d)(\d\d)(\d\d)([\._])/${1}0${2}${3}${4}${6}/;
		s/^(201\d)([2-9])(\d[03456789])(\d)(\d\d)([\._])/${1}0${2}${3}0${4}${6}/;
		s/^(201\d)([2-9])([4-9])/${1}0${2}0${3}/;
		s/^(201\d)([2-9])(\d+)/${1}0${2}${3}/;
		return $p1 . $_;
	},
	fiction=>sub {
		my $old = shift;
		my $new = $old;
		$new =~ s/[-_\s]*(?:派派小说|powered_by_Discuz\!)//g;
		$new =~ s/[《》＜＞〔〕\[\]〈〉「」『』〖〗【】（）［］｛｝\s]+/_/g;
		$new =~ s/_+/_/g;
		$new =~ s/^_+//g;
		$new =~ s/([\\\/])_+/$1/g;
		$new =~ s/_+$//g;
		$new =~ s/_+([\\\/])$/$1/g;
		$new =~ s/_+([-\.　－＿])/$1/g;
		$new =~ s/([-\.　－＿])_+/$1/g;
		return $new;
	},
	SN=>sub {
		my $old = shift;
		my $new = $old;
		$new =~ s/^(.+?[^a-zA-Z]+)([a-zA-Z]+)-(\d+)([\.\-_\s]+)(.+)$/$2-$3_$1$4$5/;
		if($new eq $old) {
			$new =~ s/^([a-zA-Z]+)-(\d+)([\.\-_\s]+)(.+)$/$1-$2_$3$4/;
		}
		$new =~ s/\s+/_/g;
		$new =~ s/([\.\-_]){2,}/$1/g;
		$new =~ s/[\.\-_]+\.([^\.]+)$/.$1/g;
		return $new;
	},
	weibo=>sub {
		my $old = shift;
		my $new = $old;
		$new =~ s/_[0-9a-zA-Z]{32}\.([^\.]+)/.$1/;
		if($old eq $new) {
			return $new;
		}
		my $ndx = 1;
		my $bak = $new;
		while(-e $new) {
			my $suf = strnum(++$ndx,2);
			$new = $bak;
			$new =~ s/\.([^\.]+)$/_$suf\.$1/;
		}
		return $new;
	},
);

my $exp;

if(defined $OPTS{rule}) {
	if($OPTS{rule} && defined $RULES{$OPTS{rule}}) {
		print STDERR "[RenameEXT] Rule => \"$OPTS{rule}\"\n";
		$exp = $RULES{$OPTS{rule}};
	}
	elsif(-f $OPTS{rule}) {
		print STDERR "[RenameEXT] Rule => \"$OPTS{rule}\"\n";
		$OPTS{filerule} = 1;
	}
	elsif($OPTS{rule}) {
		print STDERR "Error, rule \"$OPTS{rule}\" not defined.\n";
		exit 1;
	}
	else {
		print STDERR "Defined rules are:\n";
		foreach (keys %RULES) {
			print STDERR sprintf("%-12s: %s\n",$_ ,ref $RULES{$_} ? "{CODES}" : $RULES{$_}); 
		}
		exit 2;
	}
}
elsif(defined $OPTS{swap}) {
	if($OPTS{swap}) {
		$exp = "s/^([^$OPTS{swap}]+?)(\\s*)$OPTS{swap}(\\s*)(.+)\.([^.]+)\$/\$4\$3$OPTS{swap}\$2\$1.\$5/";
	}
	else {
		$exp = "s/^([^-]+?)\\s*-\\s*(.+)\\.([^.]+)\$/\$2 - \$1.\$3/";
	}
	
}
else {
	$exp = shift;
}

my $RENAMER;



if(ref $exp) {
	$RENAMER = $exp;
	print STDERR "[RenameEXT] Exp => <REF>\n";
}
elsif($OPTS{filerule}) {
	print STDERR "[RenameEXT] Read rules from <" . $OPTS{rule} . ">\n";
	my @trs;
	if(open my $fi,"<:utf8",$OPTS{rule}) {
		while(<$fi>) {
			chomp;
			s/^\s+//;
			s/\s+$//;
			next unless($_);
			my $ori = $_;
			my $chd = $ori;
			if(m/^([^\t]+)\t(.*)$/) {
				$ori = $1;
				$chd = $2;
			}
			else {
				$chd =~ s/(.){1}/$1_/g;
			}
			push @trs,[$ori,$chd];
			#print STDERR "\t" . $ori . " => " . $chd . "\n";
		}
		close $fi;
	}
	
	$RENAMER = sub {
		my $r = shift;
		foreach(@trs) {
			#print $_->[0] . " => " . $_->[1] . "\n";
			$r =~ s/$_->[0]/$_->[1]/g;
			$r =~ s/_{2,}/_/g;
			$r =~ s/_\$//g;
			$r =~ s/^_//g;
			$r =~ s/_\+(\.[^.]+)$/$1/;
		}
		return $r;
	};
}
elsif($exp =~ /\/.*\//) {
	print STDERR "[RenameEXT] Exp => \"$exp\"\n";
	$RENAMER = sub    {
            my $r = shift;
			$_ = $r;
			$! = undef;
			$@ = undef;
			eval($exp);
			print STDERR "$!$@\n" if($! or $@);
            return $_;
   };
}
else {
	print STDERR "[RenameEXT] Exp => \"$exp\"\n";
	$RENAMER = sub {
		my $r = shift;
		$_ = $r;
		$r = eval($exp);
		return $r;
	}
}

use Data::Dumper;
#print Dumper($RENAMER);

die("Error: $@\n") if($@);

my $tempname = 0;
while(-e $tempname) {
    $tempname ++;
}
sub my_rename {
    my ($old,$new)=@_;
	if($OPTS{delete}) {
		unlink $old or return undef;
		return 1;
	}
	if($OPTS{mkdir}) {
		if($new =~ m/[\/\\]/) {
			my $pdir = $new;
			$pdir =~ s/[\/\\][^\/\\]+$//;
			system("mkdir","-pv",$pdir) unless(-d $pdir);
		}
	}
	if($OPTS{copy}) {
		return (system("cp","-a","--",$old,$new) == 0);
	}
	else {
	    rename $old,"$tempname" or return undef;
		if(!rename $tempname,$new) {
			rename $tempname,$old;
			return undef;
		}
	}
    return 1;
}

my @files;
if($OPTS{dir}) {
	die("Directory not accessiable: <$OPTS{dir}>\n") unless(-d $OPTS{dir});
	my $PREFIX = $OPTS{dir} . "/";
	$PREFIX =~ s/\/\/+$//;
	$PREFIX =~ s/^\.\/+//;
	if(opendir(my $dh,$OPTS{dir})) {
		while(readdir($dh)) {
			next if($_ eq '.');
			next if($_ eq '..');
			#print STDERR $_,"\n";
			push @files,"$PREFIX$_";
		}
		close $dh;
	}
	else {
		print STDERR "Error opening directory <$OPTS{dir}>: $!\n";
	}
}
if(@ARGV) {
    push @files,@ARGV;
}

if($OPTS{dir}) {
	print STDERR "Nothing to do for directory: <$OPTS{dir}>\n" unless(@files);
}
elsif(!@files) {
    print STDERR "Please input filenames:\n" if($OPTS{verbose});
    while(<STDIN>) {
        chomp;
        push @files,$_;
    }
}


my $dfile=0;
foreach my $old(grep !/^\.\.?$/,@files) {
	print STDERR "$old\n" if($OPTS{'debug'});
	$old =~ s/\/+$//;
	my $base = '';
	my $input = $old;
	if($OPTS{lastname}) {
		if($old =~ m/^(.+[\/\\]+)([^\/\\]+)$/) {
			$base = $1;
			$input = $2;
		}
	}
	my $uold = $utf8->decode($input);
    my $unew = &$RENAMER($uold);
	my $new = $base . $utf8->encode($unew);
    if($new eq $old) {
		print STDERR ("\"$old\" [Ignored]\n") if($OPTS{verbose});
        next;
    }
	$new =~ s/\/+$//;
#	if($OPTS{force} && -e $new) {
#		print STDERR "[FORCE] backup $new.\n";
#		my $backup = $new . '.backup~';
#		if($OPTS{test}) {
#		    print STDERR ("\"$new\"\n\t->\"$backup\" (Test only) [Sucessed!]\n");
#		}
#		else {
#			if(&my_rename($new,$backup)) {
#		        print STDERR ("\"$new\"\n\t->\"$backup\" [Sucessed!]\n");
#			}
#	        else {
#		        print STDERR ("\"$new\"\n\t->\"$backup\" [Failed:$!]\n");
#			}
#		}
#	}
	if(-e $new and (!$OPTS{force})) {
	    $dfile++;
	    print STDERR "[$dfile] \"$old\"\n\t->\"$new\" [Failed:File exists]\n";
		next;
    }
    if($OPTS{test}) {
        print STDERR ("\"$old\"\n\t->\"$new\" (Test only) [Sucessed!]\n");
    }
    else {
        if(&my_rename($old,$new)) {
            print STDERR ("\"$old\"\n\t->\"$new\" [Sucessed!]\n");
        }
        else {
            print STDERR ("\"$old\"\n\t->\"$new\" [Failed:$!]\n");
        }
    }
}
