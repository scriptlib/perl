#!/usr/bin/perl -w 
###APPNAME:     renameext
###APPAUTHOR:   eotect
###APPDATE:	Sun Mar 30 12:46:15 2008
###APPVER:	0.1
###APPDESC:	rename files using perl regexp
###APPUSAGE:	[options] (pattern|func) (files...) 
###APPEXAMPLE:	renameext -t 's/^.*(\d+)\.jpg/$1' *\n\trenameext -t 'ucfirst' *
###APPOPTION:	--test, -t:Test mode on|--swap, -sw:Swap mode on|--no-dot,-nd:Replace dots|--force,-f:Override exists files
use strict;
$ARGV[0]="-h" unless(@ARGV);
use lib $ENV{XR_PERL_MODULE_DIR};

use utf8;
use Encode;
use Getopt::Long;
use MyPlace::Script::Usage qw/exit_usage/;

my %OPTS;
my @OPTIONS= qw/
	help|h|?
	test|t
	swap|sw:s
	no-dot|nd
	force|f
/;
GetOptions(\%OPTS,@OPTIONS);
exit_usage(0,$0) if($OPTS{'help'});


my $utf8 = find_encoding("utf8");
my @OLDARGV = @ARGV;
@ARGV = ();
foreach(@OLDARGV) {
    push @ARGV,$utf8->decode($_);
}
binmode STDERR,'utf8';
binmode STDOUT,'utf8';
binmode STDIN,'utf8';

my $exp;
if(defined $OPTS{swap}) {
	if($OPTS{swap}) {
		$exp = "s/^([^$OPTS{swap}]+?)(\\s*)$OPTS{swap}(\\s*)(.+)\.([^.]+)\$/\$4\$3$OPTS{swap}\$2\$1.\$5/";
	}
	else {
		$exp = "s/^([^-]+?)\\s*-\\s*(.+)\\.([^.]+)\$/\$2 - \$1.\$3/";
	}
	
}
elsif($OPTS{'no-dot'}) {
	$exp = 's/\.(?=.*\.)/ /g'
}
else {
	$exp = shift;
}

if($exp =~ /\/.*\//) {
    eval
    ('
        sub s_code 
        {
            my $r = shift;
			$_ = $r;
            ' . 
			$exp
			. ';
            return $_;
        }
    ');
}
else {
    eval
    (   '
        sub s_code 
        {
            my $r = shift;
			$_ = $r;
			$r={' . 
			$exp 
			. '}
            return $r;
        }
        '
    );
}
die("$@\n") if($@);

my $tempname = 0;
while(-e $tempname) {
    $tempname ++;
}
sub my_rename {
    my ($old,$new)=@_;
    rename $old,"$tempname" or return undef;
    rename "$tempname",$new or return undef;
    return 1;
}

my @files;
if(@ARGV) {
    @files = @ARGV;
}
else {
    print STDERR "Please input filenames:\n";
    while(<STDIN>) {
        chomp;
        push @files,$_;
    }
}


my $dfile=0;
foreach my $old(grep !/^\.\.?$/,@files) {
	print STDERR "$old\n";
    my $new = &s_code($old);
    if($new eq $old) {
        next;
    }
	$new =~ s/\/+$//;
	$old =~ s/\/+$//;
	if($OPTS{force} && -e $new) {
		print STDERR "[FORCE] backup $new.\n";
		my $backup = $new . '.backup~';
		if($OPTS{test}) {
		    print STDERR ("\"$new\"\n\t->\"$backup\" (Test only) [Sucessed!]\n");
		}
		else {
			if(&my_rename($new,$backup)) {
		        print STDERR ("\"$new\"\n\t->\"$backup\" [Sucessed!]\n");
			}
	        else {
		        print STDERR ("\"$new\"\n\t->\"$backup\" [Failed:$!]\n");
			}
		}
	}
	if(-e $new) {
        $dfile++;
        print STDERR "[$dfile] \"$old\"\n\t->\"$new\" [Failed:File exists]\n";
        next;
    }
    if($OPTS{test}) {
        print STDERR ("\"$old\"\n\t->\"$new\" (Test only) [Sucessed!]\n");
    }
    else {
        if(&my_rename($old,$new)) {
            print STDERR ("\"$old\"\n\t->\"$new\" [Sucessed!]\n");
        }
        else {
            print STDERR ("\"$old\"\n\t->\"$new\" [Failed:$!]\n");
        }
    }
}
